<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cloud-Wong</title>
  <subtitle>那就开始扯吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-23T02:56:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄耘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MacOS上基于Github的hexo博客</title>
    <link href="http://yoursite.com/2017/05/19/MacOS%E4%B8%8A%E5%9F%BA%E4%BA%8EGithub%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/05/19/MacOS上基于Github的hexo博客/</id>
    <published>2017-05-19T13:57:51.000Z</published>
    <updated>2017-05-23T02:56:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    本教程主要是为了记录此博客的搭建过程，让自己对学习搭建博客的历程有一个更清晰的认识，而不是稀里糊涂把各种官方文档啊博客啊七拼八凑的倒腾出一个博客，自己不明不白的都不知道为什么就搭起来了。</p>
<p>​    很早以前就有搭建博客的想法了，既然想好了以后是要走技术路线，起码要有一个像样的博客。并且我可以在博客里记录最近学的一块知识点，或者新技术等等，并且讲这些东西系统的、规范化的整理起来，巩固自己的同时，也能把这些东西让其他需要的人看到，这是一种很棒的感觉！</p>
<p>​    像这么一个博客，我从hexo是什么都不知道到搭建出这么一个像样的博客配置好主题推送到GitHubPage上花了将近快四个小时，中间遇到了无数的坑，磕磕绊绊的也完成了。所以只要有肯折腾，对自己有信心，没有什么做不出来。</p>
<p>​    那么下面就正式进入教程吧：<br><a id="more"></a></p>
<h1 id="1-准备工具–配置搭建环境"><a href="#1-准备工具–配置搭建环境" class="headerlink" title="1. 准备工具–配置搭建环境"></a>1. 准备工具–配置搭建环境</h1><ul>
<li>操作系统：MacOS </li>
</ul>
<ul>
<li><p>Github账号</p>
</li>
<li><p>包管理工具：Homebrew</p>
</li>
<li><p>版本控制：git</p>
</li>
<li><p>Node.js</p>
</li>
<li><p>hexo</p>
</li>
</ul>
<h2 id="1-1-GitHub账号"><a href="#1-1-GitHub账号" class="headerlink" title="1.1 GitHub账号"></a>1.1 GitHub账号</h2><ol>
<li>百度GitHub进入官网</li>
<li>Sign up for Github</li>
<li>填写账号信息，什么姓名啊邮箱啊</li>
<li>选择免费的用户计划</li>
<li>完成注册</li>
</ol>
<p>参考教程：<a href="http://jingyan.baidu.com/article/455a9950abe0ada167277864.html" target="_blank" rel="external">github注册教程地址</a></p>
<h2 id="1-2-Homebrew包管理工具"><a href="#1-2-Homebrew包管理工具" class="headerlink" title="1.2 Homebrew包管理工具"></a>1.2 Homebrew包管理工具</h2><ul>
<li><p>作用：在Mac中方便的安装软件或者卸载软件，例如git、node.js、等等。</p>
</li>
<li><p>安装 Homebrew </p>
<p>在命令行输入：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1-3-版本控制工具：git"><a href="#1-3-版本控制工具：git" class="headerlink" title="1.3 版本控制工具：git"></a>1.3 版本控制工具：git</h2><p>两种安装Git的方法:</p>
<ol>
<li><p>在安装homebrew的基础上，用命令行</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</div></pre></td></tr></table></figure>
</li>
<li><p>从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p>
</li>
</ol>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/75785087-file_1495215463124_8bd1.jpg" alt=""></p>
<h2 id="1-4-安装Node-js"><a href="#1-4-安装Node-js" class="headerlink" title="1.4 安装Node.js"></a>1.4 安装Node.js</h2><p>Node.js可以生成静态页面，也有两种安装方式：</p>
<ol>
<li><p>在安装好包管理工具的基础上，用brew来安装，在命令行输入</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install <span class="keyword">node</span><span class="title"></span></div></pre></td></tr></table></figure>
<p>某些地区某些时间可能会被墙，如果网络状况不好那可能是被墙污染了，采用第二种方式即可</p>
</li>
<li><p>在<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a>下载安装包安装</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/98603588-file_1495216272785_2dc5.png" alt="Markdown"></p>
</li>
</ol>
<h2 id="1-5-安装hexo"><a href="#1-5-安装hexo" class="headerlink" title="1.5 安装hexo"></a>1.5 安装hexo</h2><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm <span class="keyword">install</span> -g hexo</div></pre></td></tr></table></figure>
<p>接着会提示输入管理员密码，输入完毕后等待安装完成</p>
<h1 id="2-初始化本地博客"><a href="#2-初始化本地博客" class="headerlink" title="2. 初始化本地博客"></a>2. 初始化本地博客</h1><p>​    以上工作完成以后，可以说是万事俱备了。该有的都有了，那么博客就可以正式的开始搭建了。</p>
<p>​    第一步：找一个存放你整个博客站点文件的目录。以我的为例，我在/Users/yunhuang 下创建了一个名为myblog的文件，用于存放我的博客站点。</p>
<p>​    第二步：创建成功后</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="string">/Users/yunhuang/myblog</span></div></pre></td></tr></table></figure>
<p>​    cd来到你创建的目录下，执行<code>hexo init</code>命令</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init blog</span></div></pre></td></tr></table></figure>
<p>等待安装完成后的提示：</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/93680168-file_1495217189423_51b6.png" alt="Markdown"></p>
<p>再一次cd到初始化创建产生的blog文件</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd <span class="regexp">/Users/yu</span>nhuang<span class="regexp">/myblog/</span>blog</div></pre></td></tr></table></figure>
<p>然后执行如下命令，安装npm</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span></div></pre></td></tr></table></figure>
<p>进入blog文件内，看一看hexo初始化后的文件目录是不是包含以下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_config<span class="selector-class">.yml</span>    </div><div class="line">db<span class="selector-class">.json</span> </div><div class="line">node_modules </div><div class="line">package<span class="selector-class">.json</span></div><div class="line">scaffolds</div><div class="line">source</div><div class="line">themes</div></pre></td></tr></table></figure>
<p>到此，博客初始化就算完成了，已经迫不及待的想打开看看自己搭建博客的样子，测试一下吧，在命令行打开服务测试一下效果</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>
<p>打开浏览器，输入站点的默认端口<a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://localhost:4000</a></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/73145612-file_1495217577451_572.png" alt="Markdown"></p>
<p>到此，一个本地的博客初始化就算完成啦！</p>
<h1 id="3-推送到GitHub"><a href="#3-推送到GitHub" class="headerlink" title="3. 推送到GitHub"></a>3. 推送到GitHub</h1><p>​    本地的博客搭建好啦，但只能自己玩单机给自己嗨。这时候就需要用GitHub page提供的免费空间来存储我们的博客了。</p>
<h2 id="3-1-创建GitHub仓库"><a href="#3-1-创建GitHub仓库" class="headerlink" title="3.1 创建GitHub仓库"></a>3.1 创建GitHub仓库</h2><p>​    GitHub提供了免费的空间给我们存放站点，那自然是要在GitHub上创建一个仓库，仓库等名字不能乱取，为了让GitHub知道这不是一个普通的仓库，而是作为GitHub page的站点仓库，就必须采用固定的命名方式<code>用户名.github.io</code>。如<code>Cloud-Wong.github.io</code>。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/72260524-file_1495251557262_4586.png" alt="Markdown"></p>
<p>建好以后主页大致就是这么一个样子。<strong>注意</strong>，左上角的<strong>命名规范</strong>！要严格按照<code>用户名.github.io</code>这么搞才行。</p>
<h2 id="3-2-推送站点到GitHub上"><a href="#3-2-推送站点到GitHub上" class="headerlink" title="3.2 推送站点到GitHub上"></a>3.2 推送站点到GitHub上</h2><p>仓库建好了，回到我们的命令行来。cd到我们初始化好的blog文件上。执行</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">vim</span> _<span class="selector-tag">config</span><span class="selector-class">.yml</span></div></pre></td></tr></table></figure>
<p>滑到最后可以看到</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">    <span class="attribute">type</span>: git</div><div class="line">    <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//</span></div><div class="line">    <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
<p>type如果不是git就改成git，repository这个参数代表了需要推送到的地址。回到刚刚新建好的GitHub仓库，复制</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/32992010-file_1495252138238_476.png" alt="Markdown"></p>
<p>然后粘贴到repository后面</p>
<p>修改后：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">    <span class="attribute">type</span>: git</div><div class="line">    <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/Cloud-Wong/Cloud-Wong.github.io.git</span></div><div class="line">    <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
<hr>
<p>当然你如果不想在控制台用vim编译器修改，直接打开blog文件夹，找到<code>_config.yml</code>配置文件，拉到最后修改保存也可以。</p>
<p>⚠️注意：配置信息内到所有参数的<strong>冒号后面都要有一个空格！！！</strong>否则hexo命令会报错。</p>
<p>在blog文件夹下执行命令生成静态文件：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div></pre></td></tr></table></figure>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">此时若出现如下报错：</div><div class="line"><span class="keyword">ERROR </span>Local hexo not found in ~/blog</div><div class="line"><span class="keyword">ERROR </span>Try runing: 'npm install hexo --save'</div><div class="line">则执行命令：</div><div class="line">npm install hexo --save</div><div class="line">若无报错，自行忽略此步骤。</div></pre></td></tr></table></figure>
<p>静态页面生成以后，就可以把整个站点推送到GitHub上了，执行</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d</span></div></pre></td></tr></table></figure>
<p>如果说无法连接到git，执行<code>npm install hexo-deployer-git --save</code>，然后再次执行<code>hexo generate</code>和<code>hexo deploy</code>命令。</p>
<p>成功连接后，就可以打开浏览器输入<code>cloud-wong.github.io</code>验证。你将会看到和之前在本地初始化一样的界面。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>参考博客：<a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="external">与佳期的个人博客</a></p>
<p>官方文档：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub page</a></li>
<li><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本教程主要是为了记录此博客的搭建过程，让自己对学习搭建博客的历程有一个更清晰的认识，而不是稀里糊涂把各种官方文档啊博客啊七拼八凑的倒腾出一个博客，自己不明不白的都不知道为什么就搭起来了。&lt;/p&gt;
&lt;p&gt;​    很早以前就有搭建博客的想法了，既然想好了以后是要走技术路线，起码要有一个像样的博客。并且我可以在博客里记录最近学的一块知识点，或者新技术等等，并且讲这些东西系统的、规范化的整理起来，巩固自己的同时，也能把这些东西让其他需要的人看到，这是一种很棒的感觉！&lt;/p&gt;
&lt;p&gt;​    像这么一个博客，我从hexo是什么都不知道到搭建出这么一个像样的博客配置好主题推送到GitHubPage上花了将近快四个小时，中间遇到了无数的坑，磕磕绊绊的也完成了。所以只要有肯折腾，对自己有信心，没有什么做不出来。&lt;/p&gt;
&lt;p&gt;​    那么下面就正式进入教程吧：&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>java静态使用</title>
    <link href="http://yoursite.com/2017/05/18/java%E9%9D%99%E6%80%81%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/18/java静态使用/</id>
    <published>2017-05-18T12:32:25.000Z</published>
    <updated>2017-05-23T02:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h2><h3 id="什么时候用？"><a href="#什么时候用？" class="headerlink" title="什么时候用？"></a>什么时候用？</h3><ol>
<li>静态变量：<br>当分析对象中所具备的成员变量的值都是相同的，这时这个成员就可以修饰成静态。<br>只要数据在对象中都是不同的，就是对象的特有数据，这是非静态的；如果在对象中的数据是相同的，对象不需要修饰，不需要存储在对象中，设为静态即可。</li>
<li><p>静态函数：<br>函数是否修饰为静态，就参考该方法是否访问到了对象中的特有数据，如果有就用静态。</p>
<h3 id="构造函数的执行顺序"><a href="#构造函数的执行顺序" class="headerlink" title="构造函数的执行顺序"></a>构造函数的执行顺序</h3><a id="more"></a>
</li>
<li><p>JAVA中执行顺序</p>
</li>
</ol>
<p><strong>父类静态块-》自身静态块-》父类块-》父类构造器-》自身块-》自身构造器</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> DOG父类 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Dog"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"super static block"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    &#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"super block"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 子类藏獒 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mastiff</span> <span class="title">extends</span> <span class="title">Dog</span> &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mastiff</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Mastiff"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    &#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"block"</span>);  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span> &#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"static block"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;  </div><div class="line">        Mastiff mastiff=<span class="keyword">new</span> Mastiff();        </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<ul>
<li>super static block</li>
<li>static block</li>
<li>super block</li>
<li>Dog</li>
<li>block</li>
<li>Mastiff</li>
</ul>
<p> 也就是说此时的运行顺序为：</p>
<ul>
<li>父类静态块</li>
<li>自身静态块</li>
<li>父类块</li>
<li>父类构造器</li>
<li>自身块</li>
<li>自身构造器 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态&quot;&gt;&lt;a href=&quot;#静态&quot; class=&quot;headerlink&quot; title=&quot;静态&quot;&gt;&lt;/a&gt;静态&lt;/h2&gt;&lt;h3 id=&quot;什么时候用？&quot;&gt;&lt;a href=&quot;#什么时候用？&quot; class=&quot;headerlink&quot; title=&quot;什么时候用？&quot;&gt;&lt;/a&gt;什么时候用？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;静态变量：&lt;br&gt;当分析对象中所具备的成员变量的值都是相同的，这时这个成员就可以修饰成静态。&lt;br&gt;只要数据在对象中都是不同的，就是对象的特有数据，这是非静态的；如果在对象中的数据是相同的，对象不需要修饰，不需要存储在对象中，设为静态即可。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态函数：&lt;br&gt;函数是否修饰为静态，就参考该方法是否访问到了对象中的特有数据，如果有就用静态。&lt;/p&gt;
&lt;h3 id=&quot;构造函数的执行顺序&quot;&gt;&lt;a href=&quot;#构造函数的执行顺序&quot; class=&quot;headerlink&quot; title=&quot;构造函数的执行顺序&quot;&gt;&lt;/a&gt;构造函数的执行顺序&lt;/h3&gt;
    
    </summary>
    
      <category term="javase" scheme="http://yoursite.com/categories/javase/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/18/hello-world/"/>
    <id>http://yoursite.com/2017/05/18/hello-world/</id>
    <published>2017-05-17T17:22:26.000Z</published>
    <updated>2017-05-17T20:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
