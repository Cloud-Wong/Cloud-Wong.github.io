<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cloud-Wong</title>
  <subtitle>那就开始扯吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-21T15:16:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄耘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库复习大纲</title>
    <link href="http://yoursite.com/2017/06/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <id>http://yoursite.com/2017/06/21/数据库复习大纲/</id>
    <published>2017-06-21T15:12:47.000Z</published>
    <updated>2017-06-21T15:16:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-什么是数据库？数据库数据有哪三个基本特点？"><a href="#1-什么是数据库？数据库数据有哪三个基本特点？" class="headerlink" title="1.什么是数据库？数据库数据有哪三个基本特点？"></a>1.什么是数据库？数据库数据有哪三个基本特点？</h3><p>数据库是长期储存在计算机内，有组织，可共享的大量数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有<strong>较小的冗余度</strong>、<strong>较高的数据独立性</strong>和<strong>易扩展性</strong>，并可为各种用户共享<br><a id="more"></a></p>
<h3 id="2-数据库管理系统有哪些功能？"><a href="#2-数据库管理系统有哪些功能？" class="headerlink" title="2.数据库管理系统有哪些功能？"></a>2.数据库管理系统有哪些功能？</h3><ol>
<li>数据定义功能</li>
<li>数据组织、存储和管理功能</li>
<li>数据操作功能</li>
<li>数据库事务管理和运行管理</li>
<li>数据库的建立和维护功能</li>
<li>其他</li>
</ol>
<h3 id="3-数据库系统有几个特点？它与文件系统的本质区别是什么？"><a href="#3-数据库系统有几个特点？它与文件系统的本质区别是什么？" class="headerlink" title="3. 数据库系统有几个特点？它与文件系统的本质区别是什么？"></a>3. 数据库系统有几个特点？它与文件系统的本质区别是什么？</h3><h4 id="1-数据结构化"><a href="#1-数据结构化" class="headerlink" title="(1)数据结构化"></a>(1)数据结构化</h4><p>数据库系统实现整体数据结构化，这是数据库的主要功能之一，也是数据库系统与文件系统的本质区别。</p>
<p>文件系统中，记录的结构和记录之间的联系被固化在程序中，需要由程序员加以维护，既加重了程序员负担，由不利于结构变动</p>
<h4 id="2-数据的共享性高，冗余度低且易扩充"><a href="#2-数据的共享性高，冗余度低且易扩充" class="headerlink" title="(2)数据的共享性高，冗余度低且易扩充"></a>(2)数据的共享性高，冗余度低且易扩充</h4><p>数据共享可以大大减少数据冗余，介于存储空间。数据共享还能够避免数据之间的不相容性与不一致性。</p>
<h4 id="3-数据独立度高"><a href="#3-数据独立度高" class="headerlink" title="(3)数据独立度高"></a>(3)数据独立度高</h4><p>物理独立性：用户的应用程序与数据库中数据的物理结构是相互独立的。</p>
<p>逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的。</p>
<h4 id="4-数据由数据库管理系统统一管理和控制"><a href="#4-数据由数据库管理系统统一管理和控制" class="headerlink" title="(4)数据由数据库管理系统统一管理和控制"></a>(4)数据由数据库管理系统统一管理和控制</h4><p>数据库的共享将会带来数据库的安全隐患，为此数据库管理系统提供了<strong>数据库的安全性保护</strong>、<strong>数据库的完整性检查</strong>、<strong>并发控制</strong>和<strong>数据库恢复</strong>。</p>
<h3 id="4-理解概念模型中的基本概念"><a href="#4-理解概念模型中的基本概念" class="headerlink" title="4.理解概念模型中的基本概念"></a>4.理解概念模型中的基本概念</h3><p>概念模型实际上是现实世界到机器世界到一个中间层次，它用于信息世界的建模，是现实世界到信息世界的第一层抽象，是数据库设计人员进行数据库设计的有力工具。</p>
<p>信息世界中的主要概念：</p>
<ol>
<li>实体</li>
</ol>
<p>客观存在并可相互区别的事务称为实体</p>
<ol>
<li>属性</li>
</ol>
<p>实体所具有的某一特性称为属性，用椭圆形表示</p>
<ol>
<li>码（key）</li>
</ol>
<p>唯一标识实体属性集称为码</p>
<ol>
<li>实体型</li>
</ol>
<p>用实体名及属性名集合来抽象和刻画同类实体，称为实体型，矩形框表示</p>
<ol>
<li>实体集</li>
</ol>
<p>同一类型实体的集合，如全体学生</p>
<ol>
<li>联系</li>
</ol>
<p>不同实体集之间的联系，有1V1、1Vn、nVn等多种类型</p>
<p><strong>概念模型的一种表示方式</strong>：实体联系方法（ER模型）</p>
<h3 id="5-什么是数据模型的三要素？有几种常用的数据模型。"><a href="#5-什么是数据模型的三要素？有几种常用的数据模型。" class="headerlink" title="5.什么是数据模型的三要素？有几种常用的数据模型。"></a>5.什么是数据模型的三要素？有几种常用的数据模型。</h3><h4 id="数据模型三要素："><a href="#数据模型三要素：" class="headerlink" title="数据模型三要素："></a>数据模型三要素：</h4><p>数据模型是严格定义的一组概念的集合，数据模型的三要素是<strong>数据结构</strong>、<strong>数据操作</strong>和<strong>完整性约束</strong>三部分组成。</p>
<ol>
<li>数据结构：描述数据库的组成对象以及对象之间的联系。是对系统静态特征的描述。</li>
<li>数据操作：数据库中各种对象的实例允许执行的操作的集合，包括操作及有关操作规则。数据操作是对系统动态特征的描述。</li>
<li>数据库的完整性约束条件：是一组完整性规则。</li>
</ol>
<h4 id="常用的数据模型："><a href="#常用的数据模型：" class="headerlink" title="常用的数据模型："></a>常用的数据模型：</h4><h5 id="1-层次模型"><a href="#1-层次模型" class="headerlink" title="(1) 层次模型"></a>(1) 层次模型</h5><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ol>
<li>层次模型的数据结构比较简单清晰</li>
<li>层次数据库的查询效率较高</li>
<li>提供了良好的完整性支持</li>
</ol>
<h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ol>
<li>现实世界很多联系是非层次的，如多对多</li>
<li>如果一个结点具有多个双亲结点，引入冗余，使应用程序编写复杂</li>
<li>查询子女结点必须通过双亲节点</li>
<li>由于结构严密，层次命令趋于程序化</li>
</ol>
<h5 id="2-网状模型"><a href="#2-网状模型" class="headerlink" title="(2)网状模型"></a>(2)网状模型</h5><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><ol>
<li>能够更为直接的描述现实世界</li>
<li>具有良好的性能，存取效率高</li>
</ol>
<h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ol>
<li>结构复杂，不利于最终用户掌握</li>
<li>网状模型的DDL、DML复杂，用户不容易掌握和使用</li>
<li>记录之间联系是通过存储路径实现的，因此用户必须掌握结构细节，加重编写应用程序的负担。</li>
</ol>
<h5 id="3-关系模型"><a href="#3-关系模型" class="headerlink" title="(3)关系模型"></a>(3)关系模型</h5><h6 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h6><ol>
<li>关系模式与格式化模型不同，它建立在严格的数学概念的基础上</li>
<li>关系模型的概念单一，数据结构简单、清晰，用户易懂易用</li>
<li>关系模型的存取路径对用户透明，具有更高的数据独立性、更好的安全保密性，也简化了程序员工作和数据库开发建立的工作</li>
</ol>
<h3 id="6-数据库系统的三级模式结构和两层映像。特点是什么？"><a href="#6-数据库系统的三级模式结构和两层映像。特点是什么？" class="headerlink" title="6.数据库系统的三级模式结构和两层映像。特点是什么？"></a>6.数据库系统的三级模式结构和两层映像。特点是什么？</h3><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/20409749.jpg" alt="数据库三级模式图"></p>
<h4 id="三级模式"><a href="#三级模式" class="headerlink" title="三级模式"></a>三级模式</h4><h5 id="1-模式"><a href="#1-模式" class="headerlink" title="1.模式"></a>1.模式</h5><p><strong>模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</strong>它是数据库系统模式结构的中间层。</p>
<h5 id="2-外模式"><a href="#2-外模式" class="headerlink" title="2.外模式"></a>2.外模式</h5><p><strong>外模式也称子模式或用户模式，他是数据库用户能够看见和使用的局部数据的逻辑结构和特征描述，是数据库用户的数据视图，是与某一用户有关的数据的逻辑表示。</strong></p>
<h5 id="3-内模式"><a href="#3-内模式" class="headerlink" title="3.内模式"></a>3.内模式</h5><p><strong>内模式也称存储模式，一个数据库只有一个内模式。他是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</strong></p>
<h4 id="两层映像"><a href="#两层映像" class="headerlink" title="两层映像"></a>两层映像</h4><h5 id="1-外模式／模式映像"><a href="#1-外模式／模式映像" class="headerlink" title="1.外模式／模式映像"></a>1.外模式／模式映像</h5><p>模式描述的是数据的全局逻辑结构，外模式描述的是数据的局部逻辑结构，对于同一个模式可以有任意多个外模式，对于每一个外模式，数据库系统都有一个外模式／模式映像，它定义了该外模式与模式的对应关系。</p>
<p><strong>当模式改变时，由数据库管理员对各个外模式／模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性。</strong></p>
<h5 id="2-模式／内模式映像"><a href="#2-模式／内模式映像" class="headerlink" title="2.模式／内模式映像"></a>2.模式／内模式映像</h5><p>数据库中只有一个模式，也只有一个内模式，所以模式／内模式映像是唯一的，它定义了数据全局逻辑与存储结构之间的对应关系。<strong>当数据库的存储结构改变时，由数据库管理员对模式／内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性。</strong></p>
<h3 id="7-开发、管理和使用数据库的人员有哪几类？"><a href="#7-开发、管理和使用数据库的人员有哪几类？" class="headerlink" title="7.开发、管理和使用数据库的人员有哪几类？"></a>7.开发、管理和使用数据库的人员有哪几类？</h3><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/57039615.jpg" alt=""></p>
<h4 id="1-数据库管理员（DBA）"><a href="#1-数据库管理员（DBA）" class="headerlink" title="1.数据库管理员（DBA）"></a>1.数据库管理员（DBA）</h4><p>负责全面控制和管理数据库系统</p>
<h4 id="2-系统分析员和数据库设计人员"><a href="#2-系统分析员和数据库设计人员" class="headerlink" title="2.系统分析员和数据库设计人员"></a>2.系统分析员和数据库设计人员</h4><p>分析员负责应用系统的需求分析和规范说明，参与数据库系统概要设计</p>
<p>设计人员负责数据库中数据的确定及数据库各级模式的设计</p>
<h4 id="3-应用程序员"><a href="#3-应用程序员" class="headerlink" title="3.应用程序员"></a>3.应用程序员</h4><p>负责设计和编写应用系统模块，并进行调试和安装</p>
<h4 id="4-用户"><a href="#4-用户" class="headerlink" title="4.用户"></a>4.用户</h4><p>指最终用户，通过应用系统的用户接口使用数据库</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="1-理解关系的有关术语并会判断"><a href="#1-理解关系的有关术语并会判断" class="headerlink" title="1.理解关系的有关术语并会判断"></a>1.理解关系的有关术语并会判断</h3><h4 id="1-域"><a href="#1-域" class="headerlink" title="(1)域"></a>(1)域</h4><p>一组具有相同数据类型的值的集合</p>
<p>例如：自然数、整数、长度小于25字节的字符串集合、{0,1}、{男、女}等</p>
<h4 id="2-笛卡尔积"><a href="#2-笛卡尔积" class="headerlink" title="(2)笛卡尔积"></a>(2)笛卡尔积</h4><p>笛卡尔积是域上的一种集合运算，就是把两个表相乘。</p>
<p>一个域允许的不同取值个数称为这个域的<strong>基数</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">D1</span>×<span class="built_in">D2</span>×···×<span class="meta">Dn</span>=&#123;(<span class="built_in">d1</span>,<span class="built_in">d2</span>,···,<span class="meta">dn</span>) <span class="title">| di∈Di，i=1,2,···，n&#125;</span></div></pre></td></tr></table></figure>
<p>例子，设有两个域：姓名集D1={李倩，王刚，张体宁} 和 性别集D2={男，女}。则：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">设有两个域：姓名集<span class="built_in">D1</span>=&#123;李倩，王刚，张体宁&#125; 和 性别集<span class="built_in">D2</span>=&#123;男，女&#125;。</div></pre></td></tr></table></figure>
<p>这六个<strong>元组</strong>可构成一张二维表，表中部分元组称作其子集。</p>
<table>
<thead>
<tr>
<th style="text-align:center">D1</th>
<th style="text-align:center">D2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">李倩</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">王刚</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">张体宁</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">李倩</td>
<td style="text-align:center">男</td>
</tr>
<tr>
<td style="text-align:center">王刚</td>
<td style="text-align:center">男</td>
</tr>
<tr>
<td style="text-align:center">张体宁</td>
<td style="text-align:center">男</td>
</tr>
</tbody>
</table>
<h4 id="3-关系"><a href="#3-关系" class="headerlink" title="(3)关系"></a>(3)关系</h4><p>D1xD2xD3…Dn的子集叫做在域D1，D2，…，Dn上的<strong>关系</strong></p>
<p><strong>候选码的定义</strong>：如果关系中的某一属性组的值能唯一地标识一个元祖，则称该属性组为候选码；</p>
<p><strong>主码的定义</strong>：如果一个关系有多个候选码，则选定其中一个为主码；</p>
<p><strong>主属性定义</strong>：候选码的诸属性称为主属性；</p>
<p><strong>非主属性定义</strong>：不包含在任何候选码中的属性称为非主属性；</p>
<p><strong>全码</strong>：最极端的情况下，所有属性都为候选码，成为全码</p>
<p><strong>关系的三种类型</strong>：基本关系（基本表）、查询表和视图表。基本表是实际存在的表，它是实际存储数据的逻辑表示；查询表是查询结果对应的表；视图表是由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据。</p>
<h3 id="2-理解基本关系的6条性质"><a href="#2-理解基本关系的6条性质" class="headerlink" title="2.理解基本关系的6条性质"></a>2.理解基本关系的6条性质</h3><ol>
<li>列是同质的，即每一列中的分量是同一类型的数据，来自同一个域。</li>
<li>不同的列可出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名。</li>
<li>列的顺序无所谓，即列的次序可以任意交换。</li>
<li>任意两个元组的候选码不能取相同的值</li>
<li>行的顺序无所谓，可以任意交换</li>
<li>分量必须取原子值，即每一个分量是不可分的数据项<strong>（最基本的一条）</strong></li>
</ol>
<h3 id="3-理解实体完整性、参照完整性的规则并举例"><a href="#3-理解实体完整性、参照完整性的规则并举例" class="headerlink" title="3.理解实体完整性、参照完整性的规则并举例"></a>3.理解实体完整性、参照完整性的规则并举例</h3><p>关系模式中有三类完整性约束：<strong>实体完整性</strong>、<strong>参照完整性</strong>和<strong>用户定义的完整性</strong>。</p>
<h4 id="1-实体完整性规则"><a href="#1-实体完整性规则" class="headerlink" title="(1)实体完整性规则"></a>(1)实体完整性规则</h4><p><strong>若一个属性A是基本关系R的主属性，则A不能取空值。</strong></p>
<p>例如：学生（<u>学号</u>、姓名、性别、专业号、年龄）关系中学号为主码，则学号不能取空值。</p>
<p><strong>如果主码由若干属性组成，则这些主属性都不能取空值</strong></p>
<p>例如：选修（<u>学号、课程号</u>、成绩）关系中，“学号、课程号“为主码，则两个属性都不能取空值</p>
<p>对于实体完整性规则如下：</p>
<ol>
<li>实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。例如学生关系对应于学生的集合。</li>
<li>现实世界中的实体是不可区分的，即他们具有某种唯一性标识。例如每个学生都是独立的个体。</li>
<li>关系模型中的主码作为唯一性标识。</li>
<li>主码的属性既主属性不能取空值。</li>
</ol>
<h4 id="2-参照完整性规则"><a href="#2-参照完整性规则" class="headerlink" title="(2)参照完整性规则"></a>(2)参照完整性规则</h4><p>若属性F是基本关系R的外码，它与基本关系S的主码Ks相对应，则对于R中的每个元组F上的值必须：</p>
<ul>
<li>或者取空值（F的每个属性值均为空值）</li>
<li>或者等于S中某个元组的主码值</li>
</ul>
<p>例如：</p>
<p>学生（<u>学号</u>，姓名，性别，专业号，年龄）</p>
<p>专业（<u>专业号</u>，专业名）</p>
<p>学生关系中的每个元组的“专业号”属性只能取下面两类值：</p>
<ul>
<li>空值，表示尚未给该学生分配专业</li>
<li>非空值，该值必须对应专业关系中某个元组的“专业号”值</li>
</ul>
<h3 id="4-理解关系的外码、参照关系、被参照关系"><a href="#4-理解关系的外码、参照关系、被参照关系" class="headerlink" title="4.理解关系的外码、参照关系、被参照关系"></a>4.理解关系的外码、参照关系、被参照关系</h3><p>设F是基本关系R的一个或一组属性，但不是关系的码，Ks是基本关系S的主码。如果F和Ks相对应，则称F是R的<strong>外码</strong>，并称基本关系R为<strong>参照关系</strong>，基本关系S为<strong>被参照关系</strong>或目标关系</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/2282416.jpg" alt=""></p>
<h3 id="5-理解元组、分量、连接、象集等概念和记号表示及判断"><a href="#5-理解元组、分量、连接、象集等概念和记号表示及判断" class="headerlink" title="5.理解元组、分量、连接、象集等概念和记号表示及判断"></a>5.理解元组、分量、连接、象集等概念和记号表示及判断</h3><p>每一个元素{d1，d2，…，dn}叫做一个<strong>n元组</strong>，或简称<strong>元组</strong>。元素中的每一个值di叫做一个分量。</p>
<p><strong>连接</strong>也称θ连接。他是从两个关系的笛卡尔积中选取属性间满足一定条件的元组。记作</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">R∞S=&#123;<span class="keyword">tr</span> <span class="keyword">ts</span>|(<span class="keyword">tr</span>∈R) ∧ (<span class="keyword">ts</span> ∈S) ∧ <span class="keyword">tr</span>[A] θ <span class="keyword">ts</span>[B] &#125;</div><div class="line">AθB</div></pre></td></tr></table></figure>
<p>连接运算从R和S的笛卡尔积RxS中选取R关系在A属性组上的值与S关系在B属性组上的值满足比较关系θ的元组</p>
<p><strong>象集</strong>的概念。<br>在关系R中属性A可以取四个值｛a1,a2,a3,a4}其中<br>a1的象集为｛(b1,c2),(b2,c3),(b2,c1)}<br>a2的象集为｛(b3,c7),(b2,c3)}<br>a3的象集为｛(b4,c6)}<br>a4的象集为｛(b6,c6)} </p>
<p><strong>R:</strong></p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>b1</td>
<td>c2</td>
</tr>
<tr>
<td>a2</td>
<td>b3</td>
<td>c7</td>
</tr>
<tr>
<td>a3</td>
<td>b4</td>
<td>c6</td>
</tr>
<tr>
<td>a1</td>
<td>b2</td>
<td>c3</td>
</tr>
<tr>
<td>a4</td>
<td>b6</td>
<td>c6</td>
</tr>
<tr>
<td>a2</td>
<td>b2</td>
<td>c3</td>
</tr>
<tr>
<td>A1</td>
<td>B2</td>
<td>c1</td>
</tr>
</tbody>
</table>
<h3 id="6-理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式"><a href="#6-理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式" class="headerlink" title="6.理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式"></a>6.理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式</h3><p>关系运算包括：选择、投影、连接、除等。</p>
<p>设t为R的元组变量，R(U)=R(A1，A2，···，An)，则引入记号：</p>
<blockquote>
<p>t[A]：表示关系R在A属性（组）上的所有值。</p>
</blockquote>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>选择是在<strong>关系行上进行的元组挑选</strong>，结果产生同类关系。运算表达式如下：</p>
<blockquote>
<p>σF(R)={t | t∈R ∧ F(t)=true }</p>
</blockquote>
<p>σF(R)表示从关系R中选出满足条件表达式F的那些元组所构成的关系。其中F由属性名（值）、比较符、逻辑运算符组成。</p>
<p>看个例子</p>
<p>R:</p>
<table>
<thead>
<tr>
<th>A1</th>
<th>A2</th>
<th>A3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>3</td>
<td>f</td>
</tr>
<tr>
<td>b</td>
<td>2</td>
<td>d</td>
</tr>
<tr>
<td>c</td>
<td>2</td>
<td>d</td>
</tr>
<tr>
<td>e</td>
<td>6</td>
<td>f</td>
</tr>
<tr>
<td>g</td>
<td>6</td>
<td>f</td>
</tr>
</tbody>
</table>
<p>则σA2&gt;5 (R)</p>
<table>
<thead>
<tr>
<th>A1</th>
<th>A2</th>
<th>A3</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td>6</td>
<td>f</td>
</tr>
<tr>
<td>g</td>
<td>6</td>
<td>f</td>
</tr>
</tbody>
</table>
<h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>投影运算时在关系列上进行的选择，结果产生不同类关系。运算式表示如下：</p>
<blockquote>
<p>ΠA(R)={t[a] | (t∈R)}</p>
</blockquote>
<p>继续使用上面的例子，上面例子中对应的ΠA3,A2(R)为：</p>
<table>
<thead>
<tr>
<th>A3</th>
<th>A2</th>
</tr>
</thead>
<tbody>
<tr>
<td>f</td>
<td>3</td>
</tr>
<tr>
<td>d</td>
<td>2</td>
</tr>
<tr>
<td>f</td>
<td>6</td>
</tr>
</tbody>
</table>
<h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>设关系R(X,Y)和S(Y,Z)，X，Y，Z为属性组。X属性上的值为Xi。则：</p>
<blockquote>
<p>R÷S= {t[X] | t∈R ∧ ΠY(S)⊆YX}</p>
</blockquote>
<p>求 R÷S步骤如下：</p>
<blockquote>
<ol>
<li>求ΠX(R)</li>
<li>求ΠY(S)</li>
<li>YX为Xi在R中的象集，他表示R中属性组X上值为xi的诸元素在Y上分量的集合</li>
<li>R÷S运算结果为：象集YX包含了ΠY(S)的xi</li>
</ol>
</blockquote>
<p>求象集YX的方法为：对于每个值xi，xi∈Πx(R),求ΠY(σX=xi(R))</p>
<p>看个例子</p>
<p>关系R中A可以取{a1,a2,a3,a4}</p>
<p>a1的象集为a1的象集为｛(b1,c2),(b2,c3),(b2,c1)}<br>a2的象集为｛(b3,c7),(b2,c3)}<br>a3的象集为｛(b4,c6)}<br>a4的象集为｛(b6,c6)}<br>S在（B,C）上的投影为｛(b1,c2),(b2,c3),(b2,c1) }. </p>
<p>因此只有a1的象集包含了S在（B，C）上的投影，所以</p>
<p>R➗S={a1}</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/78829772.jpg" alt=""></p>
<h3 id="7-掌握等值连接与自然连接之间的区别"><a href="#7-掌握等值连接与自然连接之间的区别" class="headerlink" title="7.掌握等值连接与自然连接之间的区别"></a>7.掌握等值连接与自然连接之间的区别</h3><p>连接是在两个关系的笛卡尔积基础上再做选择运算得到的关系。如果连接条件相等，则称是等值连接，否则为不等值连接。在等值连接的基础上去除重复的列，则为自然连接。</p>
<p>一张图说明</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/22256984.jpg" alt=""></p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="1-SQL的特点和基本概念"><a href="#1-SQL的特点和基本概念" class="headerlink" title="1.SQL的特点和基本概念"></a>1.SQL的特点和基本概念</h3><h4 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h4><h5 id="1-综合统一"><a href="#1-综合统一" class="headerlink" title="(1)综合统一"></a>(1)综合统一</h5><p>数据库系统的主要功能是通过数据库支持的数据语言来实现的，SQL集数据定义语言、数据操纵语言、数据控制语言的功能于一体，语言风格统一，可以独立完成数据库生命周期中的全部活动</p>
<h5 id="2-高度非过程化"><a href="#2-高度非过程化" class="headerlink" title="(2)高度非过程化"></a>(2)高度非过程化</h5><p>只要提出做什么，而无须指明怎么做，因此无需了解存储路径。</p>
<h5 id="3-面向集合的操作方式"><a href="#3-面向集合的操作方式" class="headerlink" title="(3)面向集合的操作方式"></a>(3)面向集合的操作方式</h5><p>SQL采用集合操作方式，不仅操作对象、查找结果可以是元组的集合，而且一次插入、删除、更新操作的对象也可以是元组的集合</p>
<h5 id="4-以一种语法结构提供多种使用方式"><a href="#4-以一种语法结构提供多种使用方式" class="headerlink" title="(4)以一种语法结构提供多种使用方式"></a>(4)以一种语法结构提供多种使用方式</h5><p>SQL既是独立的语言，又是嵌入式语言，能够嵌入到高级语言（java、c++等）程序中</p>
<h5 id="5-语言简洁，易学易用"><a href="#5-语言简洁，易学易用" class="headerlink" title="(5)语言简洁，易学易用"></a>(5)语言简洁，易学易用</h5><p>设计巧妙，语言简洁，接近口语</p>
<h4 id="SQL的基本概念"><a href="#SQL的基本概念" class="headerlink" title="SQL的基本概念"></a>SQL的基本概念</h4><p>支持SQL的关系数据库管理系统同样支持关系数据库的三级模式结构。其中外模式包括若干视图和部分基本表，数据库模式包括若干基本表，内模式包括若干存储文件。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/54502437.jpg" alt=""></p>
<h3 id="2-掌握创建数据库、表、架构（模式）、完整性的SQL语句"><a href="#2-掌握创建数据库、表、架构（模式）、完整性的SQL语句" class="headerlink" title="2.掌握创建数据库、表、架构（模式）、完整性的SQL语句"></a>2.掌握创建数据库、表、架构（模式）、完整性的SQL语句</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;h3 id=&quot;1-什么是数据库？数据库数据有哪三个基本特点？&quot;&gt;&lt;a href=&quot;#1-什么是数据库？数据库数据有哪三个基本特点？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是数据库？数据库数据有哪三个基本特点？&quot;&gt;&lt;/a&gt;1.什么是数据库？数据库数据有哪三个基本特点？&lt;/h3&gt;&lt;p&gt;数据库是长期储存在计算机内，有组织，可共享的大量数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有&lt;strong&gt;较小的冗余度&lt;/strong&gt;、&lt;strong&gt;较高的数据独立性&lt;/strong&gt;和&lt;strong&gt;易扩展性&lt;/strong&gt;，并可为各种用户共享&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>连接池介绍--C3P0连接池</title>
    <link href="http://yoursite.com/2017/05/29/JAVA%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D-C3P0%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://yoursite.com/2017/05/29/JAVA连接池介绍-C3P0连接池/</id>
    <published>2017-05-29T11:20:44.000Z</published>
    <updated>2017-05-29T13:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    初学JDBC技术来连接数据库时，每一次连接DBMS都需要很繁琐的执行以下步骤：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.加载驱动</span></div><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line"><span class="comment">//2.连接数据库URL</span></div><div class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/test?"</span>  +<span class="string">"user=root&amp;password=root"</span>;</div><div class="line"><span class="comment">//3.获取数据库连接</span></div><div class="line">conn = DriverManager.getConnection(url);</div></pre></td></tr></table></figure>
<p>​    不论是一次小小的查询还是添加一条记录，你都得老老实实的按这三步走（加载驱动，连接数据库URL,获取数据库连接）。然而当系统变得复杂了，数据库的操作更加频繁，系统的性能也会随之下降。<br><a id="more"></a></p>
<p>​    有句话说“<strong>数据库连接很昂贵</strong>”。每一次创建一个数据库连接，他的内部都会执行着：</p>
<blockquote>
<ol>
<li><p>“DriverManager”检查并注册驱动程序。</p>
</li>
<li><p>在驱动程序类中调用“connect(url…)”方法。</p>
</li>
<li><p>connect方法根据我们请求的“connUrl”，创建一个“Socket连接”，连接到IP为“your.database.domain”，默认端口3306的数据库。</p>
</li>
<li><p>创建的Socket连接将被用来查询我们指定的数据库，并最终让程序返回得到一个结果。 </p>
</li>
</ol>
<p>​  有时数据库连接所耗费的时间甚至大于执行查询操作所花费的时间，如果有一种方法，能够预先加载好一些连接对象，每当要执行数据库操作时，无需重新建立连接，只需使用预先加载好的一个连接对象，那么系统的性能将会大大的提高。</p>
</blockquote>
<p><strong>连接池就是为解决这类问题存在的。</strong> </p>
<h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数据库连接池负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</strong>；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>简单的说，连接池就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p>
<p>于是，通过连接池，我们只要在系统启动时预先加载好一些连接对象，当需要的时候再也不需要繁琐的步骤，现成的给你准备好啦，拿了就用，用完了放回去下次再接着用，系统加载的速度会变快，性能也会随之增加了。</p>
<h2 id="几种主流的java连接池"><a href="#几种主流的java连接池" class="headerlink" title="几种主流的java连接池"></a>几种主流的java连接池</h2><h3 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h3><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能。目前使用它的开源项目有hibernate，spring等。是一个成熟的、高并发的JDBC连接池库，用于缓存和重用PreparedStatements支持。c3p0具有自动回收空闲连接功能。</p>
<p><strong>主要特性：</strong>1、编码的简单易用。2、连接的复用。3、连接的管理</p>
<h3 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a><strong>DBCP</strong></h3><p>是Apache上的一个 <a href="http://lib.csdn.net/base/javase" target="_blank" rel="external">Java</a>连接池项目，也是 tomcat使用的连接池组件。单独使用dbcp需要3个包：<code>common-dbcp.jar</code>,<code>common-pool.jar</code>,<code>common-collections.jar</code>由于建立数据库连接是一个非常耗时耗资源的行为，所以通过连接池预先同数据库建立一些连接，放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完后再放回去。dbcp没有自动的去回收空闲连接的功能。 </p>
<h3 id="Proxool"><a href="#Proxool" class="headerlink" title="Proxool"></a><strong>Proxool</strong></h3><p>Proxool是一个Java SQL Driver驱动程序，提供了对你选择的其它类型的驱动程序的连接池封装。可以非常简单的移植到现存的代码中。完全可配置。快速，成熟，健壮。可以透明地为你现存的JDBC驱动程序增加连接池功能。</p>
<h1 id="C3P0连接池使用"><a href="#C3P0连接池使用" class="headerlink" title="C3P0连接池使用"></a>C3P0连接池使用</h1><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li><p>下载 <a href="http://download.csdn.net/download/eson_15/9525734" target="_blank" rel="external">C3P0连接池jar包</a>和<a href="https://dev.mysql.com/downloads/connector/" target="_blank" rel="external">mysql驱动</a>,导入工程文件。</p>
</li>
<li><p>创建配置文件c3p0-config.xml。（在src根目录下，名字不能改）</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/98108670.jpg" alt=""></p>
</li>
</ol>
<h3 id="书写连接池配置"><a href="#书写连接池配置" class="headerlink" title="书写连接池配置"></a>书写连接池配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- This is default config! --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/contacts?characterEncoding=utf8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="comment">&lt;!-- This is my config for mysql--&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"mysql"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置信息主要是填写数据库驱动、数据库名称、数据库用户名、密码等等，一般修改这些信息，其他的按默认的就可以了。</p>
<h3 id="启动C3P0连接池"><a href="#启动C3P0连接池" class="headerlink" title="启动C3P0连接池"></a>启动C3P0连接池</h3><p>完成了前面的准备工作和信息配置，下面就正式进入连接池的操作了。</p>
<p>建立一个C3P0Demo测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;  	  </div><div class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;  </div><div class="line">	</div><div class="line">	<span class="comment">/** </span></div><div class="line">	 * 数据库工具类 </div><div class="line">	 * <span class="doctag">@author</span> cloud </div><div class="line">	 * </div><div class="line">	 */  </div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Util</span> </span>&#123;  </div><div class="line">	    <span class="keyword">static</span> ComboPooledDataSource cpds=<span class="keyword">null</span>;  </div><div class="line">	    <span class="keyword">static</span>&#123;  </div><div class="line">	        cpds = <span class="keyword">new</span> ComboPooledDataSource();<span class="comment">//这是mysql数据库  </span></div><div class="line">	    &#125;  </div><div class="line">	    <span class="comment">/** </span></div><div class="line">	     * 获得数据库连接 </div><div class="line">	     * <span class="doctag">@return</span>   Connection </div><div class="line">	     */  </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;  </div><div class="line">	        <span class="keyword">try</span> &#123;  </div><div class="line">	            <span class="keyword">return</span> cpds.getConnection();  </div><div class="line">	        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">	            e.printStackTrace(); </div><div class="line">	            System.out.println(<span class="string">"连接失败"</span>);</div><div class="line">	            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">	        &#125;  </div><div class="line">	    &#125;  </div><div class="line">	      </div><div class="line">	    <span class="comment">/** </span></div><div class="line">	     * 放回连接对象，close方法并不是关闭，而是更改该连接对象的状态为可用。 </div><div class="line">	     * <span class="doctag">@param</span> conn   </div><div class="line">	     */  </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn)</span></span>&#123;  </div><div class="line">	        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;  </div><div class="line">	            <span class="keyword">try</span> &#123;  </div><div class="line">	                conn.close();  </div><div class="line">	            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">	                e.printStackTrace();  </div><div class="line">	            &#125;  </div><div class="line">	        &#125;  </div><div class="line">	    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在test数据库中创建一个student表</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/30426071.jpg" alt=""></p>
<p>在刚刚创建的测试类C3P0Demo种添加如下main方法，插入1条数据</p>
<p>NO:201701</p>
<p>NAME:TOM</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">   <span class="comment">/** </span></div><div class="line">    * 测试DBUtil类 </div><div class="line">    * <span class="doctag">@param</span> args </div><div class="line">    *</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">   	Connection conn = C3P0Util.getConnection();</div><div class="line">	System.out.println(<span class="string">"连接成功"</span>);</div><div class="line">	<span class="comment">//插入信息的sql语句</span></div><div class="line">	String sql = <span class="string">"insert into student(no,name)values(?,?)"</span>;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="comment">//获取PreparedStatement对象</span></div><div class="line">		PreparedStatement ps = conn.prepareStatement(sql);</div><div class="line">		<span class="comment">//对sql语句对占位符进行动态赋值</span></div><div class="line">		ps.setString(<span class="number">1</span>, <span class="string">"201701"</span>);</div><div class="line">		ps.setString(<span class="number">2</span>, <span class="string">"TOM"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//执行更新操作</span></div><div class="line">		ps.executeUpdate();</div><div class="line">		ps.close();</div><div class="line">	   &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">		   e.printStackTrace();</div><div class="line">	   &#125;<span class="keyword">finally</span>&#123;		</div><div class="line">	<span class="comment">//关闭数据库连接</span></div><div class="line">    C3P0Util.close(conn);</div><div class="line">&#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>运行程序，执行结果如下</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/58781294.jpg" alt=""></p>
<p>查看数据库，可以看到刚刚插入的数据已经成功插入，证明C3P0数据库配置成功。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/16598521.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;​    初学JDBC技术来连接数据库时，每一次连接DBMS都需要很繁琐的执行以下步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1.加载驱动&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2.连接数据库URL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String url = &lt;span class=&quot;string&quot;&gt;&quot;jdbc:mysql://localhost:3306/test?&quot;&lt;/span&gt;  +&lt;span class=&quot;string&quot;&gt;&quot;user=root&amp;amp;password=root&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3.获取数据库连接&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;conn = DriverManager.getConnection(url);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    不论是一次小小的查询还是添加一条记录，你都得老老实实的按这三步走（加载驱动，连接数据库URL,获取数据库连接）。然而当系统变得复杂了，数据库的操作更加频繁，系统的性能也会随之下降。&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="连接池" scheme="http://yoursite.com/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
      <category term="C3P0" scheme="http://yoursite.com/tags/C3P0/"/>
    
  </entry>
  
  <entry>
    <title>MacOS上基于Github的hexo博客</title>
    <link href="http://yoursite.com/2017/05/19/MacOS%E4%B8%8A%E5%9F%BA%E4%BA%8EGithub%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/05/19/MacOS上基于Github的hexo博客/</id>
    <published>2017-05-19T13:57:51.000Z</published>
    <updated>2017-05-23T02:56:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    本教程主要是为了记录此博客的搭建过程，让自己对学习搭建博客的历程有一个更清晰的认识，而不是稀里糊涂把各种官方文档啊博客啊七拼八凑的倒腾出一个博客，自己不明不白的都不知道为什么就搭起来了。</p>
<p>​    很早以前就有搭建博客的想法了，既然想好了以后是要走技术路线，起码要有一个像样的博客。并且我可以在博客里记录最近学的一块知识点，或者新技术等等，并且讲这些东西系统的、规范化的整理起来，巩固自己的同时，也能把这些东西让其他需要的人看到，这是一种很棒的感觉！</p>
<p>​    像这么一个博客，我从hexo是什么都不知道到搭建出这么一个像样的博客配置好主题推送到GitHubPage上花了将近快四个小时，中间遇到了无数的坑，磕磕绊绊的也完成了。所以只要有肯折腾，对自己有信心，没有什么做不出来。</p>
<p>​    那么下面就正式进入教程吧：<br><a id="more"></a></p>
<h1 id="1-准备工具–配置搭建环境"><a href="#1-准备工具–配置搭建环境" class="headerlink" title="1. 准备工具–配置搭建环境"></a>1. 准备工具–配置搭建环境</h1><ul>
<li>操作系统：MacOS </li>
</ul>
<ul>
<li><p>Github账号</p>
</li>
<li><p>包管理工具：Homebrew</p>
</li>
<li><p>版本控制：git</p>
</li>
<li><p>Node.js</p>
</li>
<li><p>hexo</p>
</li>
</ul>
<h2 id="1-1-GitHub账号"><a href="#1-1-GitHub账号" class="headerlink" title="1.1 GitHub账号"></a>1.1 GitHub账号</h2><ol>
<li>百度GitHub进入官网</li>
<li>Sign up for Github</li>
<li>填写账号信息，什么姓名啊邮箱啊</li>
<li>选择免费的用户计划</li>
<li>完成注册</li>
</ol>
<p>参考教程：<a href="http://jingyan.baidu.com/article/455a9950abe0ada167277864.html" target="_blank" rel="external">github注册教程地址</a></p>
<h2 id="1-2-Homebrew包管理工具"><a href="#1-2-Homebrew包管理工具" class="headerlink" title="1.2 Homebrew包管理工具"></a>1.2 Homebrew包管理工具</h2><ul>
<li><p>作用：在Mac中方便的安装软件或者卸载软件，例如git、node.js、等等。</p>
</li>
<li><p>安装 Homebrew </p>
<p>在命令行输入：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1-3-版本控制工具：git"><a href="#1-3-版本控制工具：git" class="headerlink" title="1.3 版本控制工具：git"></a>1.3 版本控制工具：git</h2><p>两种安装Git的方法:</p>
<ol>
<li><p>在安装homebrew的基础上，用命令行</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</div></pre></td></tr></table></figure>
</li>
<li><p>从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p>
</li>
</ol>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/75785087-file_1495215463124_8bd1.jpg" alt=""></p>
<h2 id="1-4-安装Node-js"><a href="#1-4-安装Node-js" class="headerlink" title="1.4 安装Node.js"></a>1.4 安装Node.js</h2><p>Node.js可以生成静态页面，也有两种安装方式：</p>
<ol>
<li><p>在安装好包管理工具的基础上，用brew来安装，在命令行输入</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install <span class="keyword">node</span><span class="title"></span></div></pre></td></tr></table></figure>
<p>某些地区某些时间可能会被墙，如果网络状况不好那可能是被墙污染了，采用第二种方式即可</p>
</li>
<li><p>在<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a>下载安装包安装</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/98603588-file_1495216272785_2dc5.png" alt="Markdown"></p>
</li>
</ol>
<h2 id="1-5-安装hexo"><a href="#1-5-安装hexo" class="headerlink" title="1.5 安装hexo"></a>1.5 安装hexo</h2><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm <span class="keyword">install</span> -g hexo</div></pre></td></tr></table></figure>
<p>接着会提示输入管理员密码，输入完毕后等待安装完成</p>
<h1 id="2-初始化本地博客"><a href="#2-初始化本地博客" class="headerlink" title="2. 初始化本地博客"></a>2. 初始化本地博客</h1><p>​    以上工作完成以后，可以说是万事俱备了。该有的都有了，那么博客就可以正式的开始搭建了。</p>
<p>​    第一步：找一个存放你整个博客站点文件的目录。以我的为例，我在/Users/yunhuang 下创建了一个名为myblog的文件，用于存放我的博客站点。</p>
<p>​    第二步：创建成功后</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="string">/Users/yunhuang/myblog</span></div></pre></td></tr></table></figure>
<p>​    cd来到你创建的目录下，执行<code>hexo init</code>命令</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init blog</span></div></pre></td></tr></table></figure>
<p>等待安装完成后的提示：</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/93680168-file_1495217189423_51b6.png" alt="Markdown"></p>
<p>再一次cd到初始化创建产生的blog文件</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd <span class="regexp">/Users/yu</span>nhuang<span class="regexp">/myblog/</span>blog</div></pre></td></tr></table></figure>
<p>然后执行如下命令，安装npm</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span></div></pre></td></tr></table></figure>
<p>进入blog文件内，看一看hexo初始化后的文件目录是不是包含以下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_config<span class="selector-class">.yml</span>    </div><div class="line">db<span class="selector-class">.json</span> </div><div class="line">node_modules </div><div class="line">package<span class="selector-class">.json</span></div><div class="line">scaffolds</div><div class="line">source</div><div class="line">themes</div></pre></td></tr></table></figure>
<p>到此，博客初始化就算完成了，已经迫不及待的想打开看看自己搭建博客的样子，测试一下吧，在命令行打开服务测试一下效果</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>
<p>打开浏览器，输入站点的默认端口<a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://localhost:4000</a></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/73145612-file_1495217577451_572.png" alt="Markdown"></p>
<p>到此，一个本地的博客初始化就算完成啦！</p>
<h1 id="3-推送到GitHub"><a href="#3-推送到GitHub" class="headerlink" title="3. 推送到GitHub"></a>3. 推送到GitHub</h1><p>​    本地的博客搭建好啦，但只能自己玩单机给自己嗨。这时候就需要用GitHub page提供的免费空间来存储我们的博客了。</p>
<h2 id="3-1-创建GitHub仓库"><a href="#3-1-创建GitHub仓库" class="headerlink" title="3.1 创建GitHub仓库"></a>3.1 创建GitHub仓库</h2><p>​    GitHub提供了免费的空间给我们存放站点，那自然是要在GitHub上创建一个仓库，仓库等名字不能乱取，为了让GitHub知道这不是一个普通的仓库，而是作为GitHub page的站点仓库，就必须采用固定的命名方式<code>用户名.github.io</code>。如<code>Cloud-Wong.github.io</code>。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/72260524-file_1495251557262_4586.png" alt="Markdown"></p>
<p>建好以后主页大致就是这么一个样子。<strong>注意</strong>，左上角的<strong>命名规范</strong>！要严格按照<code>用户名.github.io</code>这么搞才行。</p>
<h2 id="3-2-推送站点到GitHub上"><a href="#3-2-推送站点到GitHub上" class="headerlink" title="3.2 推送站点到GitHub上"></a>3.2 推送站点到GitHub上</h2><p>仓库建好了，回到我们的命令行来。cd到我们初始化好的blog文件上。执行</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">vim</span> _<span class="selector-tag">config</span><span class="selector-class">.yml</span></div></pre></td></tr></table></figure>
<p>滑到最后可以看到</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">    <span class="attribute">type</span>: git</div><div class="line">    <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//</span></div><div class="line">    <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
<p>type如果不是git就改成git，repository这个参数代表了需要推送到的地址。回到刚刚新建好的GitHub仓库，复制</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/32992010-file_1495252138238_476.png" alt="Markdown"></p>
<p>然后粘贴到repository后面</p>
<p>修改后：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">    <span class="attribute">type</span>: git</div><div class="line">    <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/Cloud-Wong/Cloud-Wong.github.io.git</span></div><div class="line">    <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
<hr>
<p>当然你如果不想在控制台用vim编译器修改，直接打开blog文件夹，找到<code>_config.yml</code>配置文件，拉到最后修改保存也可以。</p>
<p>⚠️注意：配置信息内到所有参数的<strong>冒号后面都要有一个空格！！！</strong>否则hexo命令会报错。</p>
<p>在blog文件夹下执行命令生成静态文件：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div></pre></td></tr></table></figure>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">此时若出现如下报错：</div><div class="line"><span class="keyword">ERROR </span>Local hexo not found in ~/blog</div><div class="line"><span class="keyword">ERROR </span>Try runing: 'npm install hexo --save'</div><div class="line">则执行命令：</div><div class="line">npm install hexo --save</div><div class="line">若无报错，自行忽略此步骤。</div></pre></td></tr></table></figure>
<p>静态页面生成以后，就可以把整个站点推送到GitHub上了，执行</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d</span></div></pre></td></tr></table></figure>
<p>如果说无法连接到git，执行<code>npm install hexo-deployer-git --save</code>，然后再次执行<code>hexo generate</code>和<code>hexo deploy</code>命令。</p>
<p>成功连接后，就可以打开浏览器输入<code>cloud-wong.github.io</code>验证。你将会看到和之前在本地初始化一样的界面。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>参考博客：<a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="external">与佳期的个人博客</a></p>
<p>官方文档：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub page</a></li>
<li><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本教程主要是为了记录此博客的搭建过程，让自己对学习搭建博客的历程有一个更清晰的认识，而不是稀里糊涂把各种官方文档啊博客啊七拼八凑的倒腾出一个博客，自己不明不白的都不知道为什么就搭起来了。&lt;/p&gt;
&lt;p&gt;​    很早以前就有搭建博客的想法了，既然想好了以后是要走技术路线，起码要有一个像样的博客。并且我可以在博客里记录最近学的一块知识点，或者新技术等等，并且讲这些东西系统的、规范化的整理起来，巩固自己的同时，也能把这些东西让其他需要的人看到，这是一种很棒的感觉！&lt;/p&gt;
&lt;p&gt;​    像这么一个博客，我从hexo是什么都不知道到搭建出这么一个像样的博客配置好主题推送到GitHubPage上花了将近快四个小时，中间遇到了无数的坑，磕磕绊绊的也完成了。所以只要有肯折腾，对自己有信心，没有什么做不出来。&lt;/p&gt;
&lt;p&gt;​    那么下面就正式进入教程吧：&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>java静态使用</title>
    <link href="http://yoursite.com/2017/05/18/java%E9%9D%99%E6%80%81%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/18/java静态使用/</id>
    <published>2017-05-18T12:32:25.000Z</published>
    <updated>2017-05-23T02:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h2><h3 id="什么时候用？"><a href="#什么时候用？" class="headerlink" title="什么时候用？"></a>什么时候用？</h3><ol>
<li>静态变量：<br>当分析对象中所具备的成员变量的值都是相同的，这时这个成员就可以修饰成静态。<br>只要数据在对象中都是不同的，就是对象的特有数据，这是非静态的；如果在对象中的数据是相同的，对象不需要修饰，不需要存储在对象中，设为静态即可。</li>
<li><p>静态函数：<br>函数是否修饰为静态，就参考该方法是否访问到了对象中的特有数据，如果有就用静态。</p>
<h3 id="构造函数的执行顺序"><a href="#构造函数的执行顺序" class="headerlink" title="构造函数的执行顺序"></a>构造函数的执行顺序</h3><a id="more"></a>
</li>
<li><p>JAVA中执行顺序</p>
</li>
</ol>
<p><strong>父类静态块-》自身静态块-》父类块-》父类构造器-》自身块-》自身构造器</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> DOG父类 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Dog"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span>&#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"super static block"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    &#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"super block"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 子类藏獒 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mastiff</span> <span class="title">extends</span> <span class="title">Dog</span> &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mastiff</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Mastiff"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    &#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"block"</span>);  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span> &#123;  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"static block"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;  </div><div class="line">        Mastiff mastiff=<span class="keyword">new</span> Mastiff();        </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<ul>
<li>super static block</li>
<li>static block</li>
<li>super block</li>
<li>Dog</li>
<li>block</li>
<li>Mastiff</li>
</ul>
<p> 也就是说此时的运行顺序为：</p>
<ul>
<li>父类静态块</li>
<li>自身静态块</li>
<li>父类块</li>
<li>父类构造器</li>
<li>自身块</li>
<li>自身构造器 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态&quot;&gt;&lt;a href=&quot;#静态&quot; class=&quot;headerlink&quot; title=&quot;静态&quot;&gt;&lt;/a&gt;静态&lt;/h2&gt;&lt;h3 id=&quot;什么时候用？&quot;&gt;&lt;a href=&quot;#什么时候用？&quot; class=&quot;headerlink&quot; title=&quot;什么时候用？&quot;&gt;&lt;/a&gt;什么时候用？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;静态变量：&lt;br&gt;当分析对象中所具备的成员变量的值都是相同的，这时这个成员就可以修饰成静态。&lt;br&gt;只要数据在对象中都是不同的，就是对象的特有数据，这是非静态的；如果在对象中的数据是相同的，对象不需要修饰，不需要存储在对象中，设为静态即可。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态函数：&lt;br&gt;函数是否修饰为静态，就参考该方法是否访问到了对象中的特有数据，如果有就用静态。&lt;/p&gt;
&lt;h3 id=&quot;构造函数的执行顺序&quot;&gt;&lt;a href=&quot;#构造函数的执行顺序&quot; class=&quot;headerlink&quot; title=&quot;构造函数的执行顺序&quot;&gt;&lt;/a&gt;构造函数的执行顺序&lt;/h3&gt;
    
    </summary>
    
      <category term="javase" scheme="http://yoursite.com/categories/javase/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/18/hello-world/"/>
    <id>http://yoursite.com/2017/05/18/hello-world/</id>
    <published>2017-05-17T17:22:26.000Z</published>
    <updated>2017-05-17T20:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
