<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cloud-Wong</title>
  <subtitle>HySy Art Mask Studio</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-12T09:42:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄耘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eclipse配置Maven创建web项目</title>
    <link href="http://yoursite.com/2017/11/12/MavenCreateProject/"/>
    <id>http://yoursite.com/2017/11/12/MavenCreateProject/</id>
    <published>2017-11-12T07:04:20.000Z</published>
    <updated>2017-11-12T09:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    每当创建一个项目，多多少少都会需要用到各自框架或者别人造好的轮子，数据库连接需要用到驱动数据库的jar包、使用连接池也要导入jar包、SSH框架里面又是需要用到几十个jar包，并且这些jar包又有复杂的依赖关系，缺少了或者版本不适用了都会导致浪费大量的调试时间，因此，Maven就是解决这个痛点的一个工具（当然它的强大功能远远不止这点），下面就来介绍如何用Eclipse配置Maven创建web项目。</p>
<a id="more"></a>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/31612529.jpg" alt=""></p>
<p>以往当我们项目需要用到其他jar包时，需要到各大官网一个一个的下载下来放到我们的项目里，费时费力还容易出错。但使用Maven时，我们只需要告诉Maven我们要什么jar包，它就会自动从Maven远程仓库中将我们所需的jar包连同jar包依赖的jar包一起下载到我们本地仓库上。</p>
<p>由于Maven仓库服务器在墙外，所以下载速度非常慢，阿里提供了一个镜像仓库，在配置本地仓库时我们可以将阿里提供的镜像仓库作为我们下载jar包的远程仓库，下载速度能快非常多，感谢阿里！</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven下载</a></li>
<li>Eclipse-neon</li>
</ul>
<h1 id="Eclipse配置Maven的工作环境"><a href="#Eclipse配置Maven的工作环境" class="headerlink" title="Eclipse配置Maven的工作环境"></a>Eclipse配置Maven的工作环境</h1><p>解压下好的<code>apache-maven</code>压缩包，找到<code>apache-maven</code>—&gt;<code>conf</code>—&gt;<code>settings.xml</code>复制出来。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/47077101.jpg" alt="settings.xml"></p>
<p>放到Eclipse的工作空间下（也可以在其他位置，但不建议）。</p>
<p>在工作空间中创建<strong>本地仓库</strong>（用来存放jar包），新建文件夹命名为<code>Repository</code>。</p>
<p>用文本工具打开刚刚复制在工作空间的<code>settings.xml</code>配置文件，<code>control</code>+<code>f</code>查找<code>&lt;localRepository&gt;</code>标签，打开标签注释，把<code>&lt;localRepository&gt;</code>中的地址改成刚刚新建好的本地仓库的地址</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/14525904.jpg" alt="修改本地仓库代码"></p>
<p><code>control</code>+<code>f</code>查找<code>&lt;mirrors&gt;</code>标签，打开标签注释，改成下列代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  			 <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/59598699.jpg" alt=""></p>
<p>打开Eclipse，进入Preference偏好设置，Maven—&gt;User Settings</p>
<p>修改Global Settings 和 User Settings的地址，找到刚刚复制到工作空间的<code>settings.xml</code>配置文件，点击Apply再查看Local Repository的地址是否是我们自己创建的本地仓库的地址。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/6469370.jpg" alt=""></p>
<p>到此Eclipse的Maven环境就配置完成了。</p>
<h1 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h1><p>在eclipse中，File—&gt;New—&gt;Maven Project打开新建Maven对话框</p>
<p>然后next—&gt;选择maven-archetype-webapp</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/2672027.jpg" alt="select webapp"></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/2663457.jpg" alt=""></p>
<p>这里解释一下这些参数的含义</p>
<blockquote>
<p>Group Id：项目组织的名称</p>
<p>Artifact Id：该项目的名称</p>
<p>Version：项目版本号</p>
</blockquote>
<p>完成创建一个新的Maven项目</p>
<p>会出现index.jsp报错，先不用管它（因为缺少jar包报错）</p>
<p>菜单栏Window—&gt;Show View—&gt;Navigator打开导航</p>
<p>找到导航目录下的settings—&gt;<code>org.eclipse.wst.common.project.facet.core.xml</code>打开</p>
<p>修改版本号保存关闭</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">faceted-project</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"jst.web"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>/&gt;</span><span class="comment">&lt;!-- 修改版本号为3.0--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span> <span class="attr">version</span>=<span class="string">"1.0"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"jst.jsf"</span> <span class="attr">version</span>=<span class="string">"2.2"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"java"</span> <span class="attr">version</span>=<span class="string">"1.8"</span>/&gt;</span><span class="comment">&lt;!-- 修改版本为1.8--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">faceted-project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>右键项目—&gt;Properties—&gt;Project Facets勾选Dynamic Web Services并查看版本 号是否为3.0 </p>
<p>再打开Java Build Path—&gt;Add Library—&gt;Server Runtime选择服务器（如tomcat）</p>
<p>这是可以看到新建项目的目录已经变成了标准的Maven格式的目录</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/95664252.jpg" alt=""></p>
<p>运行<code>index.jsp</code> 测试项目，浏览器打印Hello World！创建成功。</p>
<h1 id="编写依赖"><a href="#编写依赖" class="headerlink" title="编写依赖"></a>编写依赖</h1><p>若此项目需要连接mysql数据裤，那必然需要用到mysql数据库的驱动，我们以此为例看看如何通过Maven下载数据库驱动jar包。</p>
<p>打开项目目录下的<code>pom.xml</code>，初始状态是这样的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span>  </span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0  </span></div><div class="line">                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;  </div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MavenTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>MavenTest<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>groupId : 组织标识，例如：cloud，在Repository目录下，将是: ／cloud。</li>
<li>artifactId : 项目名称，例如：MavenTest,在Repository目录下，将是：cloud/MavenTest目录。</li>
<li>version : 版本号，例如：1.0，在Repository目录下，将是：cloud/MavenTest/1.0目录。</li>
<li>packaging : 打包的格式，可以为：pom , jar , maven-plugin , ejb , war , ear , rar , par</li>
<li>finalName：项目最终打包的名称</li>
</ol>
<p>添加mysql-connection的依赖（从<a href="http://mvnrepository.com/" target="_blank" rel="external">Maven中央仓库</a>中查找所需要的jar包）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.8-dmr<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>保存可以看到Eclipse下方出现了一个下载进度条，下载完毕后查看我们的Maven依赖（第一次下载后jar包就会保存在我们的本地仓库，下次调用无需下载）<img src="http://oq6qnksdu.bkt.clouddn.com/17-11-12/24525059.jpg" alt=""></p>
<p>多了一个mysql驱动的jar包，证明我们Maven的依赖编写没问题。</p>
<p>也就是说，以后我们项目需要什么jar包，只需要在pom.xml中编写依赖就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    每当创建一个项目，多多少少都会需要用到各自框架或者别人造好的轮子，数据库连接需要用到驱动数据库的jar包、使用连接池也要导入jar包、SSH框架里面又是需要用到几十个jar包，并且这些jar包又有复杂的依赖关系，缺少了或者版本不适用了都会导致浪费大量的调试时间，因此，Maven就是解决这个痛点的一个工具（当然它的强大功能远远不止这点），下面就来介绍如何用Eclipse配置Maven创建web项目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>理解线索二叉树</title>
    <link href="http://yoursite.com/2017/08/21/threaded-binary-tree/"/>
    <id>http://yoursite.com/2017/08/21/threaded-binary-tree/</id>
    <published>2017-08-21T10:28:50.000Z</published>
    <updated>2017-08-21T15:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线索二叉树原理"><a href="#线索二叉树原理" class="headerlink" title="线索二叉树原理"></a>线索二叉树原理</h1><p>遍历二叉树的其实就是以一定规则将二叉树中的结点排列成一个线性序列，得到二叉树中结点的先序序列、中序序列或后序序列。这些线性序列中的每一个元素都有且仅有一个<strong>前驱结点</strong>和<strong>后继结点</strong>。</p>
<p>但是当我们希望得到二叉树中某一个结点的前驱或者后继结点时，普通的二叉树是无法直接得到的，只能通过遍历一次二叉树得到。每当涉及到求解前驱或者后继就需要将二叉树遍历一次，非常不方便。</p>
<p>于是是否能够改变原有的结构，将结点的前驱和后继的信息存储进来。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="二叉树结构"></p>
<a id="more"></a>
<p>观察二叉树的结构，我们发现指针域并没有充分的利用，有很多“NULL”，也就是存在很多空指针。</p>
<p>对于一个有n个结点的二叉链表，每个节点都有指向左右孩子的两个指针域，一共有<strong>2n</strong>个指针域。而n个结点的二叉树又有<strong>n-1</strong>条分支线数(除了头结点，每一条分支都指向一个结点)，也就是存在<strong>2n-(n-1)=n+1</strong>个空指针域。这些指针域只是白白的浪费空间。因此, 可以用空链域来存放结点的前驱和后继。线索二叉树就是利用n+1个空链域来存放结点的前驱和后继结点的信息。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="线索二叉树"></p>
<p>如图以中序二叉树为例，我们可以把这颗二叉树中所有空指针域的lchild，改为指向当前结点的前驱（灰色箭头），把空指针域中的rchild，改为指向结点的后继（绿色箭头）。我们把指向前驱和后继的指针叫做<strong>线索 </strong>，加上线索的二叉树就称之为<strong>线索二叉树</strong>。</p>
<h1 id="线索二叉树结点结构"><a href="#线索二叉树结点结构" class="headerlink" title="线索二叉树结点结构"></a>线索二叉树结点结构</h1><p>如果只是在原二叉树的基础上利用空结点，那么就存在着这么一个问题：我们如何知道某一结点的lchild是指向他的左孩子还是指向前驱结点？rchild是指向右孩子还是后继结点？显然我们要对他的指向增设标志来加以区分。</p>
<p>因此，我们在每一个结点都增设两个标志域<strong>LTag</strong>和<strong>RTag</strong>，它们只存放0或1的布尔型变量，占用的空间很小。于是结点的结构如图所示。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E7%82%B9.png" alt="结点结构"></p>
<p>其中：</p>
<blockquote>
<p>LTag为0是指向该结点的左孩子，为1时指向该结点的前驱</p>
<p>RTag为0是指向该结点的右孩子，为1时指向该结点的后继</p>
</blockquote>
<p>因此实际的二叉链表图为</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/%E5%AE%9E%E9%99%85%E7%9A%84%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="实际的二叉链表图"></p>
<h2 id="线索二叉树的结构实现"><a href="#线索二叉树的结构实现" class="headerlink" title="线索二叉树的结构实现"></a>线索二叉树的结构实现</h2><p>二叉树的线索存储结构定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;						</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; Link, Thread &#125; PointerTag;		<span class="comment">//Link==0,表示指向左右孩子指针</span></div><div class="line">												<span class="comment">//Thread==1,表示指向前驱或后继的线索</span></div><div class="line"><span class="comment">//二叉树线索结点存储结构</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> &#123;</span></div><div class="line">  TElemType data;						<span class="comment">//结点数据</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span>	<span class="comment">//左右孩子指针</span></div><div class="line">  PointerTag LTag;						</div><div class="line">  PointerTag RTag;						<span class="comment">//左右标志</span></div><div class="line">&#125;BiThrNode, *BiThrTree;</div></pre></td></tr></table></figure>
<h1 id="二叉树线索化"><a href="#二叉树线索化" class="headerlink" title="二叉树线索化"></a>二叉树线索化</h1><p><img src="http://oq6qnksdu.bkt.clouddn.com/%E7%BA%BF%E7%B4%A2%E5%8C%96.jpg" alt="线索化"></p>
<p>对普通二叉树以某种次序遍历使其成为线索二叉树的过程就叫做<strong>线索化</strong>。因为前驱和后继结点只有在二叉树的遍历过程中才能得到，所以线索化的具体过程就是在<strong>二叉树的遍历中修改空指针</strong>。</p>
<h2 id="线索化具体实现"><a href="#线索化具体实现" class="headerlink" title="线索化具体实现"></a>线索化具体实现</h2><p>以中序二叉树的线索化为例，线索化的具体实现就是将中序二叉树的遍历进行修改，把原本打印函数的代码改为指针修改的代码就可以了。</p>
<p>我们设置一个pre指针，永远指向遍历当前结点的前一个结点。若遍历的当前结点左指针域为空，也就是无左孩子，则把左孩子的指针指向pre(相对当前结点的前驱结点)。</p>
<p>右孩子同样的，当pre的右孩子为空，则把pre右孩子的指针指向当前结点(相对pre结点为后继结点)。</p>
<p>最后把当前结点赋给pre，完成后续的递归遍历线索化。</p>
<p>中序遍历线索化的递归函数代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree B,BiThrTree *pre)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!B) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  InThreading(B-&gt;lchild,pre);	</div><div class="line"><span class="comment">//--------------------中间为修改空指针代码---------------------</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!B-&gt;lchild)&#123;					<span class="comment">//没有左孩子	</span></div><div class="line">    B-&gt;LTag = Thread;				<span class="comment">//修改标志域为前驱线索</span></div><div class="line">    B-&gt;lchild = *pre;				<span class="comment">//左孩子指向前驱结点</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!(*pre)-&gt;rchild)&#123;				<span class="comment">//没有右孩子</span></div><div class="line">    (*pre)-&gt;RTag = Thread;			<span class="comment">//修改标志域为后继线索</span></div><div class="line">    (*pre)-&gt;rchild = B;				<span class="comment">//前驱右孩子指向当前结点</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  *pre = B;							<span class="comment">//保持pre指向p的前驱</span></div><div class="line"><span class="comment">//---------------------------------------------------------</span></div><div class="line">  InThreading(B-&gt;rchild,pre);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="增设头结点"><a href="#增设头结点" class="headerlink" title="增设头结点"></a>增设头结点</h1><p>线索化后的二叉树，就如同操作一个双向链表。于是我们想到为二叉树增设一个头结点，这样就和双向链表一样，即能够从第一个结点正向开始遍历，也可以从最后一个结点逆向遍历。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/%E7%A9%BF%E7%BA%BF.jpg" alt="增设头结点"></p>
<p>如上图，在线索二叉链表上添加一个head结点，并令其lchild域的指针指向二叉树的根结点(A)，其rchild域的指针指向中序遍历访问的最后一个结点(G)。同样地，二叉树中序序列的第一个结点中，lchild域指针指向头结点，中序序列的最后一个结点rchild域指针也指向头结点。</p>
<p>于是从头结点开始，我们既可以从第一个结点顺后继结点遍历，也可以从最后一个结点起顺前驱遍历。就和双链表一样。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/20170703143406642.png" alt="双链表"></p>
<h2 id="增设头结点并线索化的代码实现"><a href="#增设头结点并线索化的代码实现" class="headerlink" title="增设头结点并线索化的代码实现"></a>增设头结点并线索化的代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为线索二叉树添加头结点，使之可以双向操作</span></div><div class="line"><span class="function">Status <span class="title">InOrderThreading</span><span class="params">(BiThrTree *Thrt,BiThrTree T)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(!(*Thrt = (BiThrTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode)))) <span class="built_in">exit</span>(OVERFLOW);  <span class="comment">//开辟结点</span></div><div class="line">  (*Thrt)-&gt;LTag = Link;			</div><div class="line">  (*Thrt)-&gt;RTag = Thread;				<span class="comment">//设置标志域</span></div><div class="line">  (*Thrt)-&gt;rchild = (*Thrt);			<span class="comment">//右结点指向本身</span></div><div class="line">  <span class="keyword">if</span>(!T) &#123;</div><div class="line">    (*Thrt)-&gt;lchild = (*Thrt);</div><div class="line">    <span class="keyword">return</span> OK;       <span class="comment">//若根结点不存在,则该二叉树为空,让该头结点指向自身.</span></div><div class="line">  &#125;</div><div class="line">  BiThrTree pre;				<span class="comment">//设置前驱结点</span></div><div class="line">  <span class="comment">//令头结点的左指针指向根结点</span></div><div class="line">  pre = (*Thrt);</div><div class="line">  (*Thrt)-&gt;lchild = T;</div><div class="line">  <span class="comment">//开始递归输入线索化</span></div><div class="line">  InThreading(T,&amp;pre);</div><div class="line">  <span class="comment">//此时结束了最后一个结点的线索化了,下面的代码把头结点的后继指向了最后一个结点.</span></div><div class="line">  <span class="comment">//并把最后一个结点的后继也指向头结点,此时树成为了一个类似双向链表的循环.</span></div><div class="line">  pre-&gt;rchild = *Thrt;</div><div class="line">  pre-&gt;RTag = Thread;</div><div class="line">  (*Thrt)-&gt;rchild = pre;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="遍历线索二叉树"><a href="#遍历线索二叉树" class="headerlink" title="遍历线索二叉树"></a>遍历线索二叉树</h1><p>线索二叉树的遍历就可以通过之前建立好的线索，沿着后继线索依依访问下去就行。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//非递归遍历线索二叉树</span></div><div class="line"><span class="function">Status <span class="title">InOrderTraverse</span><span class="params">(BiThrTree T)</span> </span>&#123;</div><div class="line">  BiThrNode *p = T-&gt;lchild;</div><div class="line">  <span class="keyword">while</span>(p!=T)&#123;</div><div class="line">    <span class="keyword">while</span>(p-&gt;LTag==Link) p = p-&gt;lchild;    <span class="comment">//走向左子树的尽头</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data );</div><div class="line">    <span class="keyword">while</span>(p-&gt;RTag==Thread &amp;&amp; p-&gt;rchild!=T) &#123;  <span class="comment">//访问该结点的后续结点</span></div><div class="line">      p = p-&gt;rchild; </div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data );</div><div class="line">    &#125;</div><div class="line">    p = p-&gt;rchild;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="comment">//函数状态结果代码</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INFEASIBLE -1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></div><div class="line"><span class="comment">//Status是函数的类型，其值是函数结果状态代码</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; Link, Thread &#125; PointerTag;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> &#123;</span></div><div class="line">  TElemType data;</div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></div><div class="line">  PointerTag LTag;</div><div class="line">  PointerTag RTag;</div><div class="line">&#125;BiThrNode, *BiThrTree;</div><div class="line"></div><div class="line"><span class="comment">//线索二叉树初始化</span></div><div class="line"><span class="function">Status <span class="title">CreateBiThrNode</span><span class="params">(BiThrTree * B)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> ch;</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</div><div class="line">  <span class="keyword">if</span>(ch==<span class="string">'#'</span>) *B = <span class="literal">NULL</span>;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!((*B) = (BiThrNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode)))) <span class="built_in">exit</span>(OVERFLOW);</div><div class="line">    (*B)-&gt;data = ch;</div><div class="line">    (*B)-&gt;LTag = Link;</div><div class="line">    (*B)-&gt;RTag = Link;</div><div class="line">    CreateBiThrNode(&amp;(*B)-&gt;lchild);</div><div class="line">    CreateBiThrNode(&amp;(*B)-&gt;rchild);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> OK;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//线索二叉树线索化</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree B,BiThrTree *pre)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!B) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  InThreading(B-&gt;lchild,pre);</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!B-&gt;lchild)&#123;</div><div class="line">    B-&gt;LTag = Thread;</div><div class="line">    B-&gt;lchild = *pre;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!(*pre)-&gt;rchild)&#123;</div><div class="line">    (*pre)-&gt;RTag = Thread;</div><div class="line">    (*pre)-&gt;rchild = B;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  *pre = B;</div><div class="line">  InThreading(B-&gt;rchild,pre);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//为线索二叉树添加头结点，使之可以双向操作</span></div><div class="line"><span class="function">Status <span class="title">InOrderThreading</span><span class="params">(BiThrTree *Thrt,BiThrTree T)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(!(*Thrt = (BiThrTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode)))) <span class="built_in">exit</span>(OVERFLOW);</div><div class="line">  (*Thrt)-&gt;LTag = Link;</div><div class="line">  (*Thrt)-&gt;RTag = Thread;</div><div class="line">  (*Thrt)-&gt;rchild = (*Thrt);</div><div class="line">  <span class="keyword">if</span>(!T) &#123;</div><div class="line">    (*Thrt)-&gt;lchild = (*Thrt);</div><div class="line">    <span class="keyword">return</span> OK;       <span class="comment">//若根结点不存在,则该二叉树为空,让该头结点指向自身.</span></div><div class="line">  &#125;</div><div class="line">  BiThrTree pre;</div><div class="line">  <span class="comment">//令头结点的左指针指向根结点</span></div><div class="line">  pre = (*Thrt);</div><div class="line">  (*Thrt)-&gt;lchild = T;</div><div class="line">  <span class="comment">//开始递归输入线索化</span></div><div class="line">  InThreading(T,&amp;pre);</div><div class="line">  <span class="comment">//此时结束了最后一个结点的线索化了,下面的代码把头结点的后继指向了最后一个结点.</span></div><div class="line">  <span class="comment">//并把最后一个结点的后继也指向头结点,此时树成为了一个类似双向链表的循环.</span></div><div class="line">  pre-&gt;rchild = *Thrt;</div><div class="line">  pre-&gt;RTag = Thread;</div><div class="line">  (*Thrt)-&gt;rchild = pre;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//非递归遍历线索二叉树</span></div><div class="line"><span class="function">Status <span class="title">InOrderTraverse</span><span class="params">(BiThrTree T)</span> </span>&#123;</div><div class="line">  BiThrNode *p = T-&gt;lchild;</div><div class="line">  <span class="keyword">while</span>(p!=T)&#123;</div><div class="line">    <span class="keyword">while</span>(p-&gt;LTag==Link) p = p-&gt;lchild;    <span class="comment">//走向左子树的尽头</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data );</div><div class="line">    <span class="keyword">while</span>(p-&gt;RTag==Thread &amp;&amp; p-&gt;rchild!=T) &#123;  <span class="comment">//访问该结点的后续结点</span></div><div class="line">      p = p-&gt;rchild; </div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%c"</span>,p-&gt;data );</div><div class="line">    &#125;</div><div class="line">    p = p-&gt;rchild;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  BiThrTree B,T;</div><div class="line">  CreateBiThrNode(&amp;B);</div><div class="line">  InOrderThreading(&amp;T,B);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"中序遍历二叉树的结果为："</span>);</div><div class="line">  InOrderTraverse(T);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试数据:abc##de#g##f###</span></div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://crainax.github.io/2016/03/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E9%81%8D%E5%8E%86/" target="_blank" rel="external">线索二叉树的建立与遍历C语言实现过程详解</a></li>
<li><a href="https://www.slideshare.net/khabbab_h/threaded-binary-tree" target="_blank" rel="external">Threaded Binary Tree</a></li>
<li><a href="http://student.zjzk.cn/course_ware/data_structure/web/flashhtml/erchashuxiansuohua.htm" target="_blank" rel="external">动画：中序线索化二叉树</a></li>
<li>《大话数据结构》</li>
<li>《数据结构》—严蔚敏</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线索二叉树原理&quot;&gt;&lt;a href=&quot;#线索二叉树原理&quot; class=&quot;headerlink&quot; title=&quot;线索二叉树原理&quot;&gt;&lt;/a&gt;线索二叉树原理&lt;/h1&gt;&lt;p&gt;遍历二叉树的其实就是以一定规则将二叉树中的结点排列成一个线性序列，得到二叉树中结点的先序序列、中序序列或后序序列。这些线性序列中的每一个元素都有且仅有一个&lt;strong&gt;前驱结点&lt;/strong&gt;和&lt;strong&gt;后继结点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是当我们希望得到二叉树中某一个结点的前驱或者后继结点时，普通的二叉树是无法直接得到的，只能通过遍历一次二叉树得到。每当涉及到求解前驱或者后继就需要将二叉树遍历一次，非常不方便。&lt;/p&gt;
&lt;p&gt;于是是否能够改变原有的结构，将结点的前驱和后继的信息存储进来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oq6qnksdu.bkt.clouddn.com/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png&quot; alt=&quot;二叉树结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线索二叉树" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法详解</title>
    <link href="http://yoursite.com/2017/08/17/KMPAlgorithm/"/>
    <id>http://yoursite.com/2017/08/17/KMPAlgorithm/</id>
    <published>2017-08-17T14:33:37.000Z</published>
    <updated>2017-08-21T15:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传统的字符串匹配模式（暴力循环）"><a href="#传统的字符串匹配模式（暴力循环）" class="headerlink" title="传统的字符串匹配模式（暴力循环）"></a>传统的字符串匹配模式（暴力循环）</h1><p>子串的定位操作通常称作串的<strong>串的匹配模式</strong>，也就是在主串S中查找模式串（子串）T第一次出现的位置。如比较以下两个串：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主串S：ABCDABX</div><div class="line">子串T：ABX</div></pre></td></tr></table></figure>
<p>我们可以通过暴力循环的方式依次的比较S[i]和T[j]，若匹配失败，则子串向前移位1步，重新开始匹配，直至匹配完成。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主串S：ABCDABX</div><div class="line">子串T：    ABX（匹配成功）</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>传统的暴力循环代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">(String S,String T)</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> i,j;</div><div class="line">  i =  j = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(i&lt;StrLength(S) &amp;&amp; j&lt;StrLength(T))&#123;</div><div class="line">    <span class="keyword">if</span>(S[i] = T[i])&#123;</div><div class="line">      i++;</div><div class="line">      j++;</div><div class="line">    &#125;           <span class="comment">//继续比较后续字符</span></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      i = i - j + <span class="number">1</span>;</div><div class="line">      j = <span class="number">0</span>;</div><div class="line">    &#125;           <span class="comment">//指针后退重新开始匹配</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(j &gt; StrLength(T)) <span class="keyword">return</span> i - StrLength(T) + <span class="number">1</span>; <span class="comment">//返回定位</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">//匹配失败</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种传统的模式匹配方式最坏的情况下需要循环mxn次，时间复杂度为O(mxn)，因为主串中可能存在多个和模式串“部分匹配”的子串，因此指针多次回溯，效率极低。</p>
<h1 id="KMP算法的匹配过程"><a href="#KMP算法的匹配过程" class="headerlink" title="KMP算法的匹配过程"></a>KMP算法的匹配过程</h1><p>KMP算法是一种改进的<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D" target="_blank" rel="external">字符串匹配</a>算法，由D.E.Knuth，J.H.Morris和V.R.Pratt同时发现，因此人们称它为<a href="https://baike.baidu.com/item/%E5%85%8B%E5%8A%AA%E7%89%B9" target="_blank" rel="external">克努特</a>——<a href="https://baike.baidu.com/item/%E8%8E%AB%E9%87%8C%E6%96%AF" target="_blank" rel="external">莫里斯</a>——<a href="https://baike.baidu.com/item/%E6%99%AE%E6%8B%89%E7%89%B9" target="_blank" rel="external">普拉特</a>操作（简称KMP算法）。KMP算法的关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。用以下例子说明：</p>
<ul>
<li>主串：abcababca…（假设主串很长，我们就先看前9位）</li>
<li>子串：abcabx</li>
</ul>
<p>按照传统的匹配模式的过程就应该如下：</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/84639514.jpg" alt=""></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/22615603.jpg" alt=""></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/82378342.jpg" alt=""></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/2925391.jpg" alt=""></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/69329853.jpg" alt=""></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/22950730.jpg" alt=""></p>
<p>传统的匹配模式，就应该是按照上面的方式一步一步的匹配下来，一旦匹配失败，主串指针i就要回溯，效率非常低！而<strong>KMP算法的匹配过程只需要两步</strong>：</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/84639514.jpg" alt=""></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/43605050.jpg" alt=""></p>
<p>为什么一下次就可以跳过中间的比较来到这一步呢，下面就来探究KMP算法的匹配方式。</p>
<p>先来对比一下传统的匹配模式，可以发现主串的指针i值的变化：</p>
<p>第一次遍历到了i=6，匹配失败；</p>
<p>第二次遍历到了i=2，匹配失败；</p>
<p>第三次遍历到了i=3，匹配失败；</p>
<p>第四次遍历到了i=4，匹配失败；</p>
<p>第五次遍历到了i=5，匹配失败；</p>
<p>直到第五次i值终于又回到了i=6。</p>
<p>i值的变化情况：6-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</p>
<p>在传统的匹配算法中，可以发现i值是不断回溯的。</p>
<p>反观KMP算法，只需对主串一次遍历，i值不会回溯，即遍历过程中i值是不会变小的。</p>
<p>那么既然KMP算法的i值遍历只需一次，那么就要考虑j是如何变化的了，为什么第一次匹配失败后j可以从j=3开始匹配，而不像传统遍历算法那样每当匹配失败就要从j=1重新开始匹配。</p>
<p>再看看一开始对KMP算法的定义：KMP算法的关键是<strong><u>利用匹配失败后的信息</u></strong>，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。</p>
<p>划重点：<strong><u>利用匹配失败后的信息</u></strong>。什么是匹配失败后得到的信息呢？</p>
<p>于是回到刚刚的第一次匹配，看看能从这次失败的匹配中得到什么信息。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/7029800.jpg" alt=""></p>
<p>因为S[1…5] = T[1…5] 所以有 S[1,2] = T[1,2] S[4,5] = T[4,5]</p>
<p>又因为子串T有 T[1,2] = T[4,5]，所以S[4,5] = T[1,2]</p>
<p>那下一次滑动到直接让S[4,5] = T[1,2]，然后继续比较下一个元素就行啦。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/4589023.jpg" alt=""></p>
<p>这是简化模型第一次匹配的情况，根据传统的匹配算法，当匹配失败时模式串T移动一格，和S串比较。但是由于绿色部分在第一次匹配的时候发现了额外的信息：</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/25855700.jpg" alt=""></p>
<p>就像刚刚那个例子，T[1,2] = S[4,5]，都这样了，难道T还需要一格格的移动吗，直接滑过去就行啦。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-8-12/20550157.jpg" alt=""></p>
<p>这就是KMP算法的匹配过程。</p>
<h1 id="如何确定模式串的滑动区间"><a href="#如何确定模式串的滑动区间" class="headerlink" title="如何确定模式串的滑动区间"></a>如何确定模式串的滑动区间</h1><p> 知道了KMP算法的匹配过程，接下来就要考虑计算机是如何知道匹配失败时，指针j下一次指向的位置。由于KMP算法中指针i是不减的，因此j的指向位置只与模式串本身的结构有关。j的滑动位置的信息存放在next数组中。当匹配失败，就可以通过查询next数组的值得到下一次j滑动的位置。</p>
<p>next数组存放的是模式串的移位信息，具体就是模式串的部分匹配值，next数组大小与模式串T等长。</p>
<p>部分匹配值”就是”前缀”和”后缀”的<strong>最长的共有元素</strong>的长度。以”ABCDABD”为例，</p>
<p>　　－　“A”的前缀和后缀都为空集，共有元素的长度为0；</p>
<p>　　－　“AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</p>
<p>　　－　“ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</p>
<p>　　－　“ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</p>
<p>　　－　“ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为1；</p>
<p>　　－　“ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”，长度为2；</p>
<p>　　－　“ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</p>
<p><strong>下面是模式串T：a b c d a b c a | next数组的推导过程</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">      j i</div><div class="line">模式串：a b c d a b c a</div><div class="line">串下标：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span></div><div class="line">T[j]≠T[j] i++ next[i] = <span class="number">0</span></div><div class="line">         </div><div class="line">       j   i </div><div class="line">模式串：a b c d a b c a</div><div class="line">串下标：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span></div><div class="line">T[j]≠T[j] i++ next[i] = <span class="number">0</span></div><div class="line">         </div><div class="line">       j     i </div><div class="line">模式串：a b c d a b c a</div><div class="line">串下标：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></div><div class="line">T[j]≠T[j] i++ next[i] = <span class="number">0</span></div><div class="line">         </div><div class="line">       j       i </div><div class="line">模式串：a b c d a b c a</div><div class="line">串下标：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></div><div class="line">T[j]=T[j] i++  j++ next[i] = j+<span class="number">1</span></div><div class="line">        </div><div class="line">         j       i </div><div class="line">模式串：a b c d a b c a</div><div class="line">串下标：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></div><div class="line">T[j]=T[j] i++  j++ next[i] = j+<span class="number">1</span> </div><div class="line">         </div><div class="line">           j       i </div><div class="line">模式串：a b c d a b c a</div><div class="line">串下标：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line">T[j]=T[j] i++  j++ next[i] = j+<span class="number">1</span> </div><div class="line">         </div><div class="line">             j       i </div><div class="line">模式串：a b c d a b c a</div><div class="line">串下标：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line">T[j]≠T[j] j = next[j<span class="number">-1</span>] </div><div class="line">         </div><div class="line">       j             i </div><div class="line">模式串：a b c d a b c a</div><div class="line">   j ：<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></div><div class="line">next ：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></div><div class="line">T[j]=T[j] next[i] = j+<span class="number">1</span></div><div class="line">  </div><div class="line">最后得到 next[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<p>C语言的next数组实现如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(String T,<span class="keyword">int</span> next[])</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> j = <span class="number">0</span>;    </div><div class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">  next[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(i&lt;StrLength(T))&#123;</div><div class="line">    <span class="keyword">if</span>(T[i] == T[j])&#123;</div><div class="line">      next[i] = j + <span class="number">1</span>;</div><div class="line">      ++j;</div><div class="line">      ++i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</div><div class="line">        j = next[j<span class="number">-1</span>];</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        next[i] = <span class="number">0</span>;</div><div class="line">        ++i;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了next数组，我们就可以知道每当KMP匹配过程中，一旦匹配失败，我们就令指针  <strong>j = next[j-1]</strong> ，然后继续与S[i]比较。</p>
<p>KMP完整算法如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String S,String T)</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> length_S = StrLength(S);</div><div class="line">  <span class="keyword">int</span> length_T = StrLength(T);</div><div class="line">  <span class="keyword">int</span> next[length_T];</div><div class="line">  get_next(T,next);</div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(j&lt;length_T &amp;&amp; i&lt;length_S)&#123;</div><div class="line">    <span class="keyword">if</span>(T[j] == S[i])&#123;</div><div class="line">      ++i;</div><div class="line">      ++j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">if</span>(j!=<span class="number">0</span>)</div><div class="line">        j = next[j<span class="number">-1</span>];</div><div class="line">      <span class="keyword">else</span></div><div class="line">        ++i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(j==length_T) <span class="keyword">return</span> i - length_T +<span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h1><ul>
<li><p><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="external">字符串匹配的KMP算法</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/yjiyjige/p/3263858.html" target="_blank" rel="external">详解KMP算法</a></p>
</li>
<li><p><a href="https://github.com/mission-peace/interview/blob/master/src/com/interview/string/SubstringSearch.java" target="_blank" rel="external">CODE</a></p>
</li>
<li>《大话数据结构》</li>
<li>《数据结构》—严蔚敏</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;传统的字符串匹配模式（暴力循环）&quot;&gt;&lt;a href=&quot;#传统的字符串匹配模式（暴力循环）&quot; class=&quot;headerlink&quot; title=&quot;传统的字符串匹配模式（暴力循环）&quot;&gt;&lt;/a&gt;传统的字符串匹配模式（暴力循环）&lt;/h1&gt;&lt;p&gt;子串的定位操作通常称作串的&lt;strong&gt;串的匹配模式&lt;/strong&gt;，也就是在主串S中查找模式串（子串）T第一次出现的位置。如比较以下两个串：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;主串S：ABCDABX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;子串T：ABX&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过暴力循环的方式依次的比较S[i]和T[j]，若匹配失败，则子串向前移位1步，重新开始匹配，直至匹配完成。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;主串S：ABCDABX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;子串T：    ABX（匹配成功）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="KMP" scheme="http://yoursite.com/tags/KMP/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>数据库复习大纲（四）</title>
    <link href="http://yoursite.com/2017/06/24/database-review-outline-4/"/>
    <id>http://yoursite.com/2017/06/24/database-review-outline-4/</id>
    <published>2017-06-24T05:40:58.000Z</published>
    <updated>2017-06-28T02:46:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><h3 id="1-查询优化一般分为哪两种"><a href="#1-查询优化一般分为哪两种" class="headerlink" title="1.查询优化一般分为哪两种"></a>1.查询优化一般分为哪两种</h3><p>查询优化一般可分为<strong>代数优化</strong>（也称<strong>逻辑优化</strong>）和<strong>物理优化</strong>（也称<strong>非代数优化</strong>）。代数优化是指关系代数表达式的优化，即按照一定规则，通过对关系代数表达式进行等价变换，改变代数表达式中操作的次序和组合，使查询执行更加高效；物理优化则是指通过存取路径和底层操作算法的选择进行的优化。<br><a id="more"></a></p>
<h3 id="2-实现选择操作的两种算法、连接操作的四种算法分别是什么"><a href="#2-实现选择操作的两种算法、连接操作的四种算法分别是什么" class="headerlink" title="2.实现选择操作的两种算法、连接操作的四种算法分别是什么"></a>2.实现选择操作的两种算法、连接操作的四种算法分别是什么</h3><h4 id="选择操作的两种实现"><a href="#选择操作的两种实现" class="headerlink" title="选择操作的两种实现"></a>选择操作的两种实现</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span>* <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> &lt;条件表达式&gt;</div></pre></td></tr></table></figure>
<h5 id="1-简单的全表扫描"><a href="#1-简单的全表扫描" class="headerlink" title="(1). 简单的全表扫描"></a>(1). 简单的全表扫描</h5><p>假设可以使用的内存为M块，全表扫描算法思想如下：</p>
<ol>
<li>按照物理次序读Student的M块到内存</li>
<li>检查内存的每个元组t，如果t满足选择条件则输出t</li>
<li>如果Student还有其他块未被处理，重复1和2 。</li>
</ol>
<p>对于规模较小的表，这种算法简单有效。但对于规模较大的表进行顺序扫描，当选择率较低时，这个算法效率很低。</p>
<h5 id="2-索引扫描算法"><a href="#2-索引扫描算法" class="headerlink" title="(2)索引扫描算法"></a>(2)索引扫描算法</h5><p>如果选择条件中的属性上有索引，可以使用索引扫描方法，通过索引先找到满足条件的元组指针，再通过元组指针在查询的基本表中找到元组。</p>
<p>例如查找条件表达式为<code>Sno=&#39;201701</code>的学生，并且Sno上有索引，就可以使用索引得到Sno为201701的学生，再通过元组指针在Student表上找到该学生。</p>
<p>一般情况下，当选择了较低时，基于索引的选择算法要优于全表扫描算法。但当选择率较高，要查找的元组均匀分布在查找的表中，这时基于索引的选择算法性能不如全表扫描算法。</p>
<h4 id="连接操作的四种实现"><a href="#连接操作的四种实现" class="headerlink" title="连接操作的四种实现"></a>连接操作的四种实现</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span>* <span class="keyword">FROM</span> Student,SC <span class="keyword">WHERE</span> Student.Sno = SC.Sno</div></pre></td></tr></table></figure>
<h5 id="1-嵌套循环算法"><a href="#1-嵌套循环算法" class="headerlink" title="(1)嵌套循环算法"></a>(1)嵌套循环算法</h5><p>这时最<strong>简单可行</strong>的算法。对外层循环的每一个元组，检索内层循环中的每一个元组，并检查这两个元组在连接属性(Sno)上是否相等。</p>
<h5 id="2-排序—合并算法"><a href="#2-排序—合并算法" class="headerlink" title="(2)排序—合并算法"></a>(2)排序—合并算法</h5><p>这时<strong>等值连接常用的算法</strong>，尤其适合参与连接的诸表<strong>已经排序好</strong>的情况。</p>
<ol>
<li>如果参与排序的表没有排序，首先对Student表和SC表按属性Sno进行排序。</li>
<li>取Student表中的第一个Sno，依次扫描SC表中具有相同Sno的元组并连接。</li>
<li>当扫描到Sno不相等的第一个SC元组时，返回Student表扫描它的下一个元组，再扫描SC表中具有相同Sno的元组并连接。</li>
</ol>
<p>重复上述步骤直至Student表扫描完毕。</p>
<h5 id="3-索引连接算法"><a href="#3-索引连接算法" class="headerlink" title="(3)索引连接算法"></a>(3)索引连接算法</h5><ol>
<li>在SC表上已经建立了属性Sno的索引</li>
<li>对Student中的每一个元组，由Sno值通过SC索引查找相应的SC元组</li>
<li>把这些SC元组和Student元组连接起来</li>
</ol>
<h5 id="4-hash-join-算法"><a href="#4-hash-join-算法" class="headerlink" title="(4)hash join 算法"></a>(4)hash join 算法</h5><p>hash join算法也是处理等值连接的算法。它把属性作为hash码，用同一个函数把Student表和SC表中的元组散列到hash表中。</p>
<ol>
<li>划分阶段，也称创建阶段，即创建hash表。对包含较少元组的表进行一遍处理，把它的元组按hash函数分散到hash表的桶中；</li>
<li>试探阶段，也称连接阶段，对另一个进行一遍处理，把SC表的元组也按同一个hash函数进行散列，找到适当的桶，并且把SC元组与桶中来自Student表并与之相匹配的表连接起来。</li>
</ol>
<h3 id="3-掌握将查询语句转化成语法树的表示方法。"><a href="#3-掌握将查询语句转化成语法树的表示方法。" class="headerlink" title="3.掌握将查询语句转化成语法树的表示方法。"></a>3.掌握将查询语句转化成语法树的表示方法。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span>  Student.Sname</div><div class="line">     <span class="keyword">FROM</span> Student，SC</div><div class="line">     <span class="keyword">WHERE</span> Student.Sno=SC.Sno <span class="keyword">AND</span> SC.Cno=‘<span class="number">2</span>’；</div></pre></td></tr></table></figure>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-24/68542588.jpg" alt="关系代数语法树"></p>
<h3 id="4-在查询优化中，选择运算应尽可能先做"><a href="#4-在查询优化中，选择运算应尽可能先做" class="headerlink" title="4.在查询优化中，选择运算应尽可能先做"></a>4.在查询优化中，选择运算应尽可能先做</h3><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="1-事务的概念和特性"><a href="#1-事务的概念和特性" class="headerlink" title="1.事务的概念和特性"></a>1.事务的概念和特性</h3><p>所谓事务是用户定义的一个数据库操作序列，这些操作要嘛全做，要么全不做，是一个不可分割的工作单位。</p>
<p>事务具有四个特性：<strong>原子性</strong>、<strong>一致性</strong>、<strong>隔离性</strong>和<strong>持续性</strong>。</p>
<ol>
<li>原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要嘛都做要嘛都不做。</li>
<li>一致性：事务的执行结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交结果时，就说数据库处于一致性状态。</li>
<li>隔离性：一个事务执行不能被其它事务干扰。</li>
<li>持续性：一个事务一但提交，数据库中的数据的改变就是永久性的。</li>
</ol>
<h3 id="2-在SQL-Server中有哪些定义事务的语句"><a href="#2-在SQL-Server中有哪些定义事务的语句" class="headerlink" title="2.在SQL Server中有哪些定义事务的语句"></a>2.在SQL Server中有哪些定义事务的语句</h3><p><code>BEGIN TRANSACTION</code> ：开始一个显式事务。</p>
<p><code>COMMIT TRANSACTION</code> ：标识一个显式事务或隐式事务正常结束而提交。</p>
<p><code>SAVE TRANSACTION</code> ：在事务内定义一个检查点标记。</p>
<p><code>ROLLBACK TRANSACTION</code> ：回滚当前事务。</p>
<h3 id="3-数据库系统有几类故障，恢复的实现技术是什么"><a href="#3-数据库系统有几类故障，恢复的实现技术是什么" class="headerlink" title="3.数据库系统有几类故障，恢复的实现技术是什么"></a>3.数据库系统有几类故障，恢复的实现技术是什么</h3><h4 id="故障类型"><a href="#故障类型" class="headerlink" title="故障类型"></a>故障类型</h4><h5 id="1-事务故障"><a href="#1-事务故障" class="headerlink" title="(1)事务故障"></a>(1)事务故障</h5><p>更多的是非预期的事务故障</p>
<p>事务由于某些内部条件无法继续正常执行</p>
<blockquote>
<p>如：非法输入、找不到数据、溢出等</p>
</blockquote>
<h5 id="2-系统故障"><a href="#2-系统故障" class="headerlink" title="(2)系统故障"></a>(2)系统故障</h5><p>系统故障是指造成系统停止运转的任何事件，使得系统要重新启动。</p>
<blockquote>
<p>如：CPU故障、操作系统故障、系统断电等</p>
</blockquote>
<h5 id="3-介质故障"><a href="#3-介质故障" class="headerlink" title="(3)介质故障"></a>(3)介质故障</h5><p>系统故障称为软故障，介质故障称为硬故障，指外存故障。</p>
<blockquote>
<p>如：磁盘损坏、瞬间强磁场干扰等</p>
</blockquote>
<h5 id="4-计算机病毒"><a href="#4-计算机病毒" class="headerlink" title="(4)计算机病毒"></a>(4)计算机病毒</h5><h4 id="恢复实现技术"><a href="#恢复实现技术" class="headerlink" title="恢复实现技术"></a>恢复实现技术</h4><p>建立冗余数据，利用冗余数据实施数据库恢复。建立数据冗余最常用的技术是<strong>数据转储</strong>和<strong>登记日志文件</strong>。</p>
<h5 id="1-数据转储"><a href="#1-数据转储" class="headerlink" title="(1)数据转储"></a>(1)数据转储</h5><p>数据库管理员定期将整个磁带、磁盘复制到其他存储介质保存起来的过程。</p>
<h5 id="2-登记日志文件"><a href="#2-登记日志文件" class="headerlink" title="(2)登记日志文件"></a>(2)登记日志文件</h5><p>日志文件是用来记录事务对数据库的更新操作文件。</p>
<h3 id="4-根据日志记录，判断系统故障发生时刻事务该采取的操作"><a href="#4-根据日志记录，判断系统故障发生时刻事务该采取的操作" class="headerlink" title="4.根据日志记录，判断系统故障发生时刻事务该采取的操作"></a>4.根据日志记录，判断系统故障发生时刻事务该采取的操作</h3><p>（参考课后习题4，5）</p>
<p>以系统故障点为分界线。若故障前事务已完成则执行重做，若故障后事务仍为完成则回滚。</p>
<h2 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h2><h3 id="1-并发操作带来哪三种数据不一致性"><a href="#1-并发操作带来哪三种数据不一致性" class="headerlink" title="1.并发操作带来哪三种数据不一致性"></a>1.并发操作带来哪三种数据不一致性</h3><h4 id="1-丢失修改"><a href="#1-丢失修改" class="headerlink" title="(1)丢失修改"></a>(1)丢失修改</h4><p>两个事务T1、T2同时读入一数据，T2提交的结果破坏了T1提交的结果，导致T1数据丢失。</p>
<h4 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="(2)不可重复读"></a>(2)不可重复读</h4><p>事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果。</p>
<h4 id="3-读脏数据"><a href="#3-读脏数据" class="headerlink" title="(3)读脏数据"></a>(3)读脏数据</h4><p>事务T1修改某一数据并将其写回磁盘，事务T2读取同一数据后，T1由于某种原因被撤销，T1修改后的数据恢复原值，T2读到的数据就与数据库中的数据不一致，T2读到的数据就称为“脏数据”。</p>
<h3 id="2-封锁的类型、相容矩阵、封锁粒度"><a href="#2-封锁的类型、相容矩阵、封锁粒度" class="headerlink" title="2.封锁的类型、相容矩阵、封锁粒度"></a>2.封锁的类型、相容矩阵、封锁粒度</h3><h4 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h4><hr>
<p>封锁的基本类型有两种：<strong>排他锁</strong>（简称X锁）和<strong>共享锁</strong>（简称S锁）。</p>
<p><strong>排他锁又称写锁</strong>。若事务T对数据对象A加上X锁，则只允许T读取和修改A，任何其他食物都不能再对A加任何锁，直至T释放A上的锁为止。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。</p>
<p><strong>共享锁又称读锁</strong>。若事务T对A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直至T释放A上的S锁为止，这就保证了其他事务可以读A，但是在T释放A上的S锁之前不能对A进行任何修改。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-24/4521639.jpg" alt="封锁类型的相容矩阵"></p>
<h4 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h4><hr>
<p>封锁对象的大小称为<strong>封锁粒度</strong>。封锁对象可以是逻辑单元，也可以是物理单元。以关系数据库为例，封锁对象可以是这样一些逻辑单元：属性值、属性值的集合、元组、关系、索引项直至整个数据库；也可以是这样一些物理单元：页、物理记录等。</p>
<p><strong>封锁粒度与系统的并发度和并发控制的开销密切相关</strong>。封锁粒度越大，数据库所能封锁的数据单元就越少，并发度越小，系统开销也越小；反之。并发度越高，系统开销也越大。</p>
<h3 id="3-什么是死锁"><a href="#3-什么是死锁" class="headerlink" title="3.什么是死锁"></a>3.什么是死锁</h3><p>事务T1封锁了数据R1，事务T2封锁了数据R2.然后T1又请求R2，因为T2已经封锁了R2，于是T1等待T2释放R2上的锁；接着T2又申请封锁R1，因为T1也已经封锁了R1，T2也只能等待T1释放R1上的锁。这样就形成了<strong>T1在等待T2，而T2又在等待T1的局面，T1和T2两个事务永远不能结束，形成死锁</strong>。</p>
<h3 id="4-什么是可串行化调度"><a href="#4-什么是可串行化调度" class="headerlink" title="4.什么是可串行化调度"></a>4.什么是可串行化调度</h3><p>多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同，这种调度策略为<strong>可串行化调度</strong>。</p>
<p><strong>可串行性</strong>是并发事务正确调度的准则</p>
<h3 id="5-根据给定的事务设计调度策略"><a href="#5-根据给定的事务设计调度策略" class="headerlink" title="5.根据给定的事务设计调度策略"></a>5.根据给定的事务设计调度策略</h3><p>（参考课后习题9）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第九章&quot;&gt;&lt;a href=&quot;#第九章&quot; class=&quot;headerlink&quot; title=&quot;第九章&quot;&gt;&lt;/a&gt;第九章&lt;/h2&gt;&lt;h3 id=&quot;1-查询优化一般分为哪两种&quot;&gt;&lt;a href=&quot;#1-查询优化一般分为哪两种&quot; class=&quot;headerlink&quot; title=&quot;1.查询优化一般分为哪两种&quot;&gt;&lt;/a&gt;1.查询优化一般分为哪两种&lt;/h3&gt;&lt;p&gt;查询优化一般可分为&lt;strong&gt;代数优化&lt;/strong&gt;（也称&lt;strong&gt;逻辑优化&lt;/strong&gt;）和&lt;strong&gt;物理优化&lt;/strong&gt;（也称&lt;strong&gt;非代数优化&lt;/strong&gt;）。代数优化是指关系代数表达式的优化，即按照一定规则，通过对关系代数表达式进行等价变换，改变代数表达式中操作的次序和组合，使查询执行更加高效；物理优化则是指通过存取路径和底层操作算法的选择进行的优化。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库复习大纲（三）</title>
    <link href="http://yoursite.com/2017/06/23/database-rebiew-outline-3/"/>
    <id>http://yoursite.com/2017/06/23/database-rebiew-outline-3/</id>
    <published>2017-06-23T08:51:15.000Z</published>
    <updated>2017-06-28T02:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="1-数据库设计的特点是什么，可分为哪6个阶段"><a href="#1-数据库设计的特点是什么，可分为哪6个阶段" class="headerlink" title="1.数据库设计的特点是什么，可分为哪6个阶段"></a>1.数据库设计的特点是什么，可分为哪6个阶段</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol>
<li>“三分技术、七分管理、十二分基础数据”是数据库设计的特点之一。</li>
<li>数据库设计过程中把数据库结构设计和对数据的处理设计密切结合起来，</li>
</ol>
<h4 id="六个阶段："><a href="#六个阶段：" class="headerlink" title="六个阶段："></a>六个阶段：</h4><a id="more"></a>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/34165605.jpg" alt=""></p>
<p>分别为<strong>需求分析</strong>、<strong>概念结构设计</strong>、<strong>逻辑结构设计</strong>、<strong>物理结构设计</strong>、<strong>数据库实施</strong>和<strong>数据库维护和运行</strong>。</p>
<h3 id="2-掌握概念设计和逻辑设计方法-E-R图，转化成关系模式等-，要会对给定的实例进行分析"><a href="#2-掌握概念设计和逻辑设计方法-E-R图，转化成关系模式等-，要会对给定的实例进行分析" class="headerlink" title="2.掌握概念设计和逻辑设计方法(E-R图，转化成关系模式等)，要会对给定的实例进行分析"></a>2.掌握概念设计和逻辑设计方法(E-R图，转化成关系模式等)，要会对给定的实例进行分析</h3><h4 id="1-ER图转关系模式方法"><a href="#1-ER图转关系模式方法" class="headerlink" title="(1)ER图转关系模式方法"></a>(1)ER图转关系模式方法</h4><p>ER模型中的主要成分是实体和联系。</p>
<p>对于实体，可以这样转换：将每个实体转换成一个关系模式，实体的属性即为关系模式的属性，实体的关键字即为关系模式的主码。</p>
<p>实体  →   关系   属性  →  关系的属性</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/78392692.jpg" alt=""></p>
<h4 id="2-联系为M：N的转换方法"><a href="#2-联系为M：N的转换方法" class="headerlink" title="(2)联系为M：N的转换方法"></a>(2)联系为M：N的转换方法</h4><p>若实体间联系是M:N，则将联系也转换成关系模式，其属性为两端实实体的主码加上联系的属性，其主码为两端实体主码的组合。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/19963765.jpg" alt=""></p>
<blockquote>
<p>S(<u>S#,</u> SNAME ,AGE,SEX )</p>
<p>C(<u>C#</u>, CNAME ,TEACHER)</p>
<p>SC(<u>S#,C#,</u>GRADE)</p>
</blockquote>
<h4 id="3-联系为1：N的转换方法"><a href="#3-联系为1：N的转换方法" class="headerlink" title="(3)联系为1：N的转换方法"></a>(3)联系为1：N的转换方法</h4><p>若实体间的联系是1:N的，则<strong>在N端</strong>实体转换成的关系模式中加入1端实体转换成的关系模式的主码和联系的属性。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/37146179.jpg" alt=""></p>
<blockquote>
<p>车间模式（<u>车间编号</u>，车间名，电话）</p>
<p>职工模式（<u>工号</u>，姓名，性别，年龄，<em>车间编号</em>，聘期）</p>
</blockquote>
<h4 id="4-联系为1：1的转换方法"><a href="#4-联系为1：1的转换方法" class="headerlink" title="(4)联系为1：1的转换方法"></a>(4)联系为1：1的转换方法</h4><p>若实体间的联系是1:1的，可以在两个实体转换成的两个关系模式中<strong>任意一个</strong>关系模式的属性中加入另一个关系模式的主码和联系类型的属性。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/93804548.jpg" alt=""></p>
<blockquote>
<p>学校模式（校名，地址，电话，校长名，任职年月）</p>
<p>校长模式（姓名，年龄，性别，职称）</p>
</blockquote>
<h4 id="5-实例"><a href="#5-实例" class="headerlink" title="(5)实例"></a>(5)实例</h4><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/49275922.jpg" alt=""></p>
<blockquote>
<p>商店（<u>商店编号</u>，商店名，地址）</p>
<p>职工（<u>职工编号</u>，姓名，性别，业绩，<strong>商店编号</strong>，聘期，月薪）</p>
<p>商品（<u>商品号</u>，商品名，规格，单价）</p>
<p>销售（<u>商店编号</u>，<u>商品号</u>，月销售量）</p>
</blockquote>
<h3 id="3-掌握ER图的集成方法。要解决哪三类冲突？"><a href="#3-掌握ER图的集成方法。要解决哪三类冲突？" class="headerlink" title="3.掌握ER图的集成方法。要解决哪三类冲突？"></a>3.掌握ER图的集成方法。要解决哪三类冲突？</h3><p>ER图集成分两步走：</p>
<ul>
<li>合并E-R图，生成初步E-R图</li>
<li>修改和重构。消除不必要的冗余，生成基本ER图</li>
</ul>
<h4 id="消除冲突"><a href="#消除冲突" class="headerlink" title="消除冲突"></a>消除冲突</h4><p>因为局部应用不同,设计人员不同,所面向的问题不同，从而造成的各局部ER图的不一致。冲突包括<strong>属性冲突</strong>、<strong>命名冲突</strong>和<strong>结构冲突</strong>。</p>
<p><strong>属性冲突</strong></p>
<p>属性域冲突，即属性值的类型、取值范围或取值集合不同。</p>
<blockquote>
<p>例如零件号，有的部门把它定义为整数，有的部门把它定义为字符型。</p>
</blockquote>
<p>属性取值单位冲突</p>
<blockquote>
<p>例如，零件的重量以公斤、斤、克为单位。</p>
</blockquote>
<p><strong>命名冲突</strong></p>
<p>同名异义，即不同意义的对象在不同的局部应用中具有相同的名字。</p>
<p>异名同义（一义多名），即同一意义的对象在不同的局部应用中具有不同的名字。</p>
<p><strong>结构冲突</strong></p>
<p>同一对象在不同应用中具有不同的抽象。</p>
<blockquote>
<p>例如，职工在某一局部应用中被当作实体，而在另一局部应用中则被当作属性。</p>
</blockquote>
<p>同一实体在不同子系统的E-R图中所包含的属性个数和属性排列次序不完全相同。</p>
<p>实体间的联系在不同的E-R图中为不同的类型。</p>
<h3 id="4-数据库实施包含哪些工作"><a href="#4-数据库实施包含哪些工作" class="headerlink" title="4.数据库实施包含哪些工作"></a>4.数据库实施包含哪些工作</h3><p>数据库实施包含两项重要的工作，一项是<strong>数据的载入</strong>，另一项是<strong>应用程序的编码</strong>。</p>
<h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="1-游标定义和使用的SQL命令动词"><a href="#1-游标定义和使用的SQL命令动词" class="headerlink" title="1.游标定义和使用的SQL命令动词"></a>1.游标定义和使用的SQL命令动词</h3><p>定义游标：定义一个游标，使之对应一个select语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC SQL DECLARE &lt;游标名&gt; CURSOR FOR &lt;SELECT语句&gt;</div></pre></td></tr></table></figure>
<p>打开游标：打开一个游标，执行游标对应的查询，结果集合为该游标的活动集。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC SQL OPEN &lt;游标名&gt;   <span class="comment">//定位于查询结果第一行的前一行</span></div></pre></td></tr></table></figure>
<p>游标推进语句：在活动集中将游标移到特定的行，并取出该行数据放到相应的宿主变量中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC SQL FETCH &lt;游标名&gt; INTO &lt;主变量名&gt;</div></pre></td></tr></table></figure>
<p>游标关闭语句：关闭游标，释放活动集及其所占资源，使它不再和查询结果相联系。需要再使用该游标时，执行open语句。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC SQL CLOSE &lt;游标名&gt;</div></pre></td></tr></table></figure>
<h3 id="2-创建和执行存储过程的SQL语句"><a href="#2-创建和执行存储过程的SQL语句" class="headerlink" title="2.创建和执行存储过程的SQL语句"></a>2.创建和执行存储过程的SQL语句</h3><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">格式：</div><div class="line">CREATE Procedure 过程名（［参数1，参数2，...］） AS</div><div class="line">&lt;PL/SQL块&gt;；</div></pre></td></tr></table></figure>
<p>过程名：数据库服务器合法的对象标识。</p>
<p>参数列表：用名字来标识调用时给出的参数值，必须指定值的数据类型。参数也可以定义输入参数、输出参数或输入/输出参数。默认为输入参数。</p>
<p>过程体：是一个<pl sql块="">。包括声明部分和可执行语句部分。</pl></p>
<h4 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">格式： </div><div class="line">CALL/PERFORM  Procedure 过程名(［参数<span class="number">1</span>，参数<span class="number">2</span>，...］)；</div></pre></td></tr></table></figure>
<p>使用CALL或者PERFORM等方式激活存储过程的执行。</p>
<p>在PL/SQL中，数据库服务器支持在过程体中调用其他存储过程</p>
<h3 id="3-ODBC应用系统包含哪4个部分"><a href="#3-ODBC应用系统包含哪4个部分" class="headerlink" title="3.ODBC应用系统包含哪4个部分"></a>3.ODBC应用系统包含哪4个部分</h3><p>ODBC应用系统由四部分构成：<strong>用户应用程序</strong>、<strong>ODBC驱动程序管理器</strong>、<strong>数据库驱动程序</strong>、<strong>数据源</strong>（关系数据库系统和数据库）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第七章&quot;&gt;&lt;a href=&quot;#第七章&quot; class=&quot;headerlink&quot; title=&quot;第七章&quot;&gt;&lt;/a&gt;第七章&lt;/h2&gt;&lt;h3 id=&quot;1-数据库设计的特点是什么，可分为哪6个阶段&quot;&gt;&lt;a href=&quot;#1-数据库设计的特点是什么，可分为哪6个阶段&quot; class=&quot;headerlink&quot; title=&quot;1.数据库设计的特点是什么，可分为哪6个阶段&quot;&gt;&lt;/a&gt;1.数据库设计的特点是什么，可分为哪6个阶段&lt;/h3&gt;&lt;h4 id=&quot;特点：&quot;&gt;&lt;a href=&quot;#特点：&quot; class=&quot;headerlink&quot; title=&quot;特点：&quot;&gt;&lt;/a&gt;特点：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;“三分技术、七分管理、十二分基础数据”是数据库设计的特点之一。&lt;/li&gt;
&lt;li&gt;数据库设计过程中把数据库结构设计和对数据的处理设计密切结合起来，&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;六个阶段：&quot;&gt;&lt;a href=&quot;#六个阶段：&quot; class=&quot;headerlink&quot; title=&quot;六个阶段：&quot;&gt;&lt;/a&gt;六个阶段：&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库复习大纲（二）</title>
    <link href="http://yoursite.com/2017/06/22/database-review-outline-2/"/>
    <id>http://yoursite.com/2017/06/22/database-review-outline-2/</id>
    <published>2017-06-22T08:23:55.000Z</published>
    <updated>2017-06-27T13:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="1-一个不好关系模式通常存在哪四种问题"><a href="#1-一个不好关系模式通常存在哪四种问题" class="headerlink" title="1.一个不好关系模式通常存在哪四种问题"></a>1.一个不好关系模式通常存在哪四种问题</h3><ol>
<li>数据冗余</li>
<li>更新异常</li>
<li>插入异常</li>
<li>删除异常</li>
</ol>
<h3 id="2-理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码"><a href="#2-理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码" class="headerlink" title="2.理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码"></a>2.理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码</h3><a id="more"></a>
<h4 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>设关系模式R（U），属性集合U={A1，A2，…，An}，X，Y为属性集合U的子集，如果对于关系模式R(U)的任一可能的关系r，r中的任意两个元组u、v，若有u[X]=v[X]，就有u[Y]=v[Y]，则称X函数决定Y，或称Y函数依赖于X。用符号X→Y表示。其中X为决定因素，Y为被决定因素。若对于R（U）的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值性等，而在Y上的属性值不等。</p>
<ul>
<li>函数依赖是语义范畴的概念，只能根据语义来确定一个函数依赖关系。</li>
<li>函数依赖X→Y的定义要求关系模式R的任何可能的关系r中的元组都满足函数依赖条件。</li>
</ul>
<h5 id="函数依赖与属性间的联系类型的关系"><a href="#函数依赖与属性间的联系类型的关系" class="headerlink" title="函数依赖与属性间的联系类型的关系"></a>函数依赖与属性间的联系类型的关系</h5><p>•若属性X和Y之间有“一对一”的联系,则X→  Y,Y →  X,X &lt;–&gt;  Y.（如不存在同名的学号和姓名）</p>
<p>•若属性X和Y之间有“多对一”的联系,则X → Y,但Y  -/-&gt; X. </p>
<p>•若属性X和Y之间有“多对多”的联系,则X与Y之间不存在任何函数依赖.</p>
<p><em>当确定函数依赖关系时,可从属性间的联系入手</em></p>
<h5 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h5><ol>
<li>若X→Y，则X称作决定因素（Determinant）</li>
<li>若X→Y，Y→X，称作X&lt;–&gt;Y。</li>
<li>若Y不函数依赖于X，称作X -/-&gt; Y。</li>
<li>X→Y，若Y不是X的子集，则称X→Y为<strong>非平凡的函数依赖</strong>。正常讨论的都是非平凡的函数依赖。</li>
<li>X→Y，若Y是X的子集，则称X→Y为<strong>平凡的函数依赖</strong>。</li>
<li><strong>完全函数依赖</strong>(full functional dependency)：在R(U)中，设X、Y是关系模式R（U）中不同的属性子集，若存在 X→Y，且<strong>不存在</strong> X的任何真子集X’，使得 X’→Y，则称Y完全函数依赖 ( full functional dependency ) 于X。记作            X-F-&gt;Y。</li>
</ol>
<blockquote>
<p>例如：（学号、课程）→成绩就是完全依赖函数，因为（学号、课程）的真子集不论是学号还是课程，都无法推出成绩。</p>
</blockquote>
<ol>
<li><strong>部分函数依赖</strong>：在关系模式R（U）中，X、Y是关系模式R（U）中不同的属性子集，若X→Y成立，如果X中存在任何真子集X’，而且有X’→Y也成立，则称Y对X是部分函数依赖，记作：X-P-&gt;Y。</li>
</ol>
<blockquote>
<p>例如，（学号、课程）→所在系就是部分依赖函数，因为学号→所在系，而学号是（学号、课程）的真子集。</p>
</blockquote>
<h4 id="码"><a href="#码" class="headerlink" title="码"></a>码</h4><p>超码：设X为关系R的属性或属性组，U为R的元组.若X→U，则称X为R的超码。</p>
<p>候选码：设X为R的超码，若X中不含多余属性，则称X为R的候选码。</p>
<p>主码：若关系R有多个候选码，则可以从中选定一个作为R的主码。</p>
<p>主属性：包含在任何一个候选码中的属性，称作主属性，不包含在任何码中的属性称为非主属性。</p>
<p>全码(all-key)：关系模式的码由整个属性组构成。</p>
<h3 id="3-理解1NF、2NF、3NF、BCNF、4NF的特点并判断"><a href="#3-理解1NF、2NF、3NF、BCNF、4NF的特点并判断" class="headerlink" title="3.理解1NF、2NF、3NF、BCNF、4NF的特点并判断"></a>3.理解1NF、2NF、3NF、BCNF、4NF的特点并判断</h3><h4 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h4><p>关系模式R的所有的<strong>属性值域都是不可再分的</strong>。即不能以集合、序列等作为属性值。</p>
<h4 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h4><p>对于关系模式R，若R∈1NF，且R中的<strong>每一个非主属性完全函数依赖于R的某个候选键</strong>，则R∈2NF（<strong>消除非主属性对键的部分依赖</strong>）</p>
<blockquote>
<p>sc(<u>sno</u>,sname,<u>cno</u>,grade)</p>
<p>sno→sname 非主属性部分依赖主键</p>
<p>可以划分为</p>
<p>sc(<u>sno,cn</u>o,grade)</p>
<p>s(<u>sno</u>,sname)</p>
</blockquote>
<h4 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h4><p>如果关系模式R是第二范式，且每个非主属性都不传递依赖于R的候选码，则称R是第三范式(3NF)的模式。则称R∈3NF（<strong>消除非主属性对键的传递依赖</strong>）</p>
<blockquote>
<p>s(<u>sno</u>,sname,sdept,dept_manager)</p>
<p>sno→sname,sdept    sdept→dept_manager</p>
<p>存在传递依赖：sno→dept_manager</p>
<p>可以划分为</p>
<p>s (<u>sno</u>,sname,sdept)</p>
<p>d(<u>sdept</u>,dept_manager)</p>
</blockquote>
<h4 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h4><p>如果关系模式R是第一范式，且每个属性都不传递依赖于R的候选键，那么称R是BCNF的模式。</p>
<blockquote>
<p>sct(s,c,t)    //学生，课程，教师</p>
<p>（s，t），（s，c）为候选键。</p>
<p>t→c           //每位教师只上一门课</p>
<p>s,c→t        //某学生选定一门课，就对应一位老师</p>
<p>s,t→c         //每门课有若干位教师；但某学生选定</p>
<p>​                  一位老师，就对应一门课</p>
<p>sct属于3NF 但不属于BCNF</p>
</blockquote>
<p>简单的判断方法：</p>
<ol>
<li>找出候选码，如上例（S，t），（S，C）为候选码</li>
<li>找出依赖关系</li>
<li>每一个决定属性集是否都包含候选码（箭头左边是不是候选码）</li>
</ol>
<h4 id="第四范式（4NF）"><a href="#第四范式（4NF）" class="headerlink" title="第四范式（4NF）"></a>第四范式（4NF）</h4><p>4NF就是限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。</p>
<h3 id="4-理解多值依赖关系、平凡多值依赖关系的含义"><a href="#4-理解多值依赖关系、平凡多值依赖关系的含义" class="headerlink" title="4.理解多值依赖关系、平凡多值依赖关系的含义"></a>4.理解多值依赖关系、平凡多值依赖关系的含义</h3><p>设R(U)是属性集U上的一个关系模式。X，Y，Z是U的子集,并且Z=U-X-Y。关系模式R(U)中多值依赖X→→Y成立，当且仅当对R(U)的任一关系r,给定的一对(x，z)值有一<strong>组</strong>Y的值，这组值仅仅决定于x值而与z值无关。</p>
<p>若X→→Y，而Z＝Ø，则称X→→Y为<strong>平凡的多值依赖</strong>。否则称X→→Y为<strong>非平凡的多值依赖</strong>。</p>
<blockquote>
<p>关系模式WSC(W,S,C)中，W表示仓库，S表示保管员，C表示商品。假设每个仓库有若干个保管员，有若干种商品。每个保管员保管所在仓库的所有商品，每种商品被所有保管员保管。</p>
<table>
<thead>
<tr>
<th style="text-align:left">W</th>
<th style="text-align:left">S</th>
<th style="text-align:left">C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">W1</td>
<td style="text-align:left">S1</td>
<td style="text-align:left">C1</td>
</tr>
<tr>
<td style="text-align:left">W1</td>
<td style="text-align:left">S1</td>
<td style="text-align:left">C2</td>
</tr>
<tr>
<td style="text-align:left">W1</td>
<td style="text-align:left">S1</td>
<td style="text-align:left">C3</td>
</tr>
<tr>
<td style="text-align:left">W1</td>
<td style="text-align:left">S2</td>
<td style="text-align:left">C1</td>
</tr>
<tr>
<td style="text-align:left">W1</td>
<td style="text-align:left">S2</td>
<td style="text-align:left">C2</td>
</tr>
<tr>
<td style="text-align:left">W1</td>
<td style="text-align:left">S2</td>
<td style="text-align:left">C3</td>
</tr>
<tr>
<td style="text-align:left">W2</td>
<td style="text-align:left">S3</td>
<td style="text-align:left">C4</td>
</tr>
<tr>
<td style="text-align:left">W2</td>
<td style="text-align:left">S3</td>
<td style="text-align:left">C5</td>
</tr>
<tr>
<td style="text-align:left">W2</td>
<td style="text-align:left">S4</td>
<td style="text-align:left">C4</td>
</tr>
<tr>
<td style="text-align:left">W2</td>
<td style="text-align:left">S4</td>
<td style="text-align:left">C5</td>
</tr>
</tbody>
</table>
</blockquote>
<p>对于W的每一个值，不论C取什么值，S有一个完整的集与它对应所以W→→ S</p>
<p>由于C和S完全对称，所以必然W→→ C成立</p>
<h3 id="5-多值依赖与函数依赖的区别是什么"><a href="#5-多值依赖与函数依赖的区别是什么" class="headerlink" title="5.多值依赖与函数依赖的区别是什么"></a>5.多值依赖与函数依赖的区别是什么</h3><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><ul>
<li>X→Y的有效性仅决定于X、Y属性集上的值，它在任何属性集W（W ∈ U）上都成立。</li>
<li>X→→Y在属性集W（XY ∈W  ∈ U）上成立，但在U上不一定成立。因为多值依赖的定义中不仅涉及属性组X和Y，而且涉及U中其余属性Z。</li>
</ul>
<h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><ul>
<li>若X→→Y在R(U)上成立，则不能断言对于Y′ ∈  Y，是否有X→→Y ′成立。</li>
<li>若X→Y在R(U)上成立，则对于Y′ ∈  Y，有X→Y ′成立。</li>
</ul>
<h3 id="6-运用关系运算律完成关系模式的规范化"><a href="#6-运用关系运算律完成关系模式的规范化" class="headerlink" title="6.运用关系运算律完成关系模式的规范化"></a>6.运用关系运算律完成关系模式的规范化</h3><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/39400146.jpg" alt=""></p>
<h3 id="7-如何计算闭包"><a href="#7-如何计算闭包" class="headerlink" title="7.如何计算闭包"></a>7.如何计算闭包</h3><p>F为关系模式R(U)的函数依赖集，我们把F以及所有被F逻辑蕴涵的函数依赖的集合称为F的闭包，记为F+。</p>
<p>示例1:</p>
<blockquote>
<p>对关系R（A,B,C,D,E,F）,给定函数依赖AB→C,BC→AD,D→B,CF→B,求 {A，B}+</p>
<p>{AB}+=AB</p>
<p>{AB}+=ABC  //AB→C</p>
<p>{AB}+=ABCD  //BC→AD</p>
<p>{AB}+=ABCD  //D→B</p>
</blockquote>
<p>示例2:</p>
<blockquote>
<p>R (A, B, C, G, H, I), F = {A→B, A→C, CG→H, CG→I, B→H},计算(AG)F+ </p>
<table>
<thead>
<tr>
<th>所用依赖</th>
<th>(AG)F+</th>
</tr>
</thead>
<tbody>
<tr>
<td>A→B</td>
<td>AGB</td>
</tr>
<tr>
<td>A→C</td>
<td>AGBC</td>
</tr>
<tr>
<td>CG→H</td>
<td>AGBCH</td>
</tr>
<tr>
<td>CG→I</td>
<td>AGBCHI</td>
</tr>
</tbody>
</table>
<p>(AG)F+  = AGBCHI</p>
</blockquote>
<h3 id="8-理解无损连接性和保持函数依赖的概念并判断"><a href="#8-理解无损连接性和保持函数依赖的概念并判断" class="headerlink" title="8.理解无损连接性和保持函数依赖的概念并判断"></a>8.理解无损连接性和保持函数依赖的概念并判断</h3><h4 id="无损连接的判断"><a href="#无损连接的判断" class="headerlink" title="无损连接的判断"></a>无损连接的判断</h4><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/97773069.jpg" alt=""></p>
<ol>
<li>建立一张n列k行的表，每一列对应一个属性，每一行对应分解中的一个关系模式。若属性Aj属于Ui，则在j列i行上真上aj，否则填上bij；</li>
<li>依次考察每一个依赖关系FDi（Xi→Ai），找到Xi所对应的列，并且列中元素为ai的行，所对应的Ai中的元素是否有ai，如果有，则全部改成ai，反之则全部改成bmj，m为这些行号最小值。</li>
<li>直到表格中出现一行为a1, a2 , … , an 的一行。说明是无损连接。反之则为有损。</li>
</ol>
<h4 id="保持函数依赖的判断"><a href="#保持函数依赖的判断" class="headerlink" title="保持函数依赖的判断"></a>保持函数依赖的判断</h4><p>看懂就行。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-23/83584879.jpg" alt=""></p>
<h3 id="9-如何计算关系的最小依赖集。掌握无损连接的BCNF分解算法，掌握无损连接、保持依赖的3NF分解算法。"><a href="#9-如何计算关系的最小依赖集。掌握无损连接的BCNF分解算法，掌握无损连接、保持依赖的3NF分解算法。" class="headerlink" title="9.如何计算关系的最小依赖集。掌握无损连接的BCNF分解算法，掌握无损连接、保持依赖的3NF分解算法。"></a>9.如何计算关系的最小依赖集。掌握无损连接的BCNF分解算法，掌握无损连接、保持依赖的3NF分解算法。</h3><h4 id="最小依赖集"><a href="#最小依赖集" class="headerlink" title="最小依赖集"></a>最小依赖集</h4><p>每个函数依赖集F都可以被一个右部只有单属性的函数依赖集G所覆盖。</p>
<p>满足下列条件的函数依赖集F称为最小函数依赖集合，记作Fmin：</p>
<p><strong>右边单属性化</strong>：F中任一函数依赖X→ A，A必是单属性。</p>
<p><strong>无冗余依赖</strong>：F中不存在这样的函数依赖X → A，使得F与F - {X →A}等价。</p>
<p><strong>无冗余决定属性</strong>：F中不存在这样的函数依赖X → A，在X中有真子集Z，使得F与（F - {X → A}） È {Z → A}等价。</p>
<h4 id="无损连接、保持依赖的3NF分解算法"><a href="#无损连接、保持依赖的3NF分解算法" class="headerlink" title="无损连接、保持依赖的3NF分解算法"></a>无损连接、保持依赖的3NF分解算法</h4><p>输入：关系模式R（A、B、C、D    … ）及依赖关系F</p>
<p>输出：R的一个分解{R1,R2,R3}</p>
<ol>
<li>求出最小依赖集Fmin</li>
<li>对Fmin中左边相同的进行合并（反右边单属性化）</li>
<li>对Fmin中的每一个依赖关系构成一个关系模式</li>
<li>到此完成保持依赖的3NF关系模式R`</li>
<li>找到原关系模式R中的候选码</li>
<li>若R`中的任一关系都不包含候选码，则候选码单独构造一个关系模式。</li>
<li>分解结束，输出。</li>
</ol>
<h4 id="无损连接的BCNF分解算法"><a href="#无损连接的BCNF分解算法" class="headerlink" title="无损连接的BCNF分解算法"></a>无损连接的BCNF分解算法</h4><p>⒈置r = {R}</p>
<p>⒉检查r中各关系模式是否为BCNF，若是，则转4算法终止。 </p>
<p>⒊设r 中一个关系模式R不是BCNF，</p>
<p>  则S中存在函数依赖X→A，A不属于X ，且X不是S的键，</p>
<p>  设S1=XA,S2=S-A,用分解{S1，S2}代替S ，返回到⒉</p>
<p>4.分解结束，输出r。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第六章&quot;&gt;&lt;a href=&quot;#第六章&quot; class=&quot;headerlink&quot; title=&quot;第六章&quot;&gt;&lt;/a&gt;第六章&lt;/h2&gt;&lt;h3 id=&quot;1-一个不好关系模式通常存在哪四种问题&quot;&gt;&lt;a href=&quot;#1-一个不好关系模式通常存在哪四种问题&quot; class=&quot;headerlink&quot; title=&quot;1.一个不好关系模式通常存在哪四种问题&quot;&gt;&lt;/a&gt;1.一个不好关系模式通常存在哪四种问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据冗余&lt;/li&gt;
&lt;li&gt;更新异常&lt;/li&gt;
&lt;li&gt;插入异常&lt;/li&gt;
&lt;li&gt;删除异常&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码&quot;&gt;&lt;a href=&quot;#2-理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码&quot; class=&quot;headerlink&quot; title=&quot;2.理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码&quot;&gt;&lt;/a&gt;2.理解并会判断属性的函数依赖关系，平凡、部分、传递函数依赖关系、候选码、主码、主属性、非主属性、全码&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库复习大纲（一）</title>
    <link href="http://yoursite.com/2017/06/22/Database-review-outline1/"/>
    <id>http://yoursite.com/2017/06/22/Database-review-outline1/</id>
    <published>2017-06-22T06:48:41.000Z</published>
    <updated>2017-06-27T13:06:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-什么是数据库？数据库数据有哪三个基本特点？"><a href="#1-什么是数据库？数据库数据有哪三个基本特点？" class="headerlink" title="1.什么是数据库？数据库数据有哪三个基本特点？"></a>1.什么是数据库？数据库数据有哪三个基本特点？</h3><p>数据库是长期储存在计算机内，有组织，可共享的大量数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有<strong>较小的冗余度</strong>、<strong>较高的数据独立性</strong>和<strong>易扩展性</strong>，并可为各种用户共享<br><a id="more"></a></p>
<h3 id="2-数据库管理系统有哪些功能？"><a href="#2-数据库管理系统有哪些功能？" class="headerlink" title="2.数据库管理系统有哪些功能？"></a>2.数据库管理系统有哪些功能？</h3><ol>
<li>数据定义功能</li>
<li>数据组织、存储和管理功能</li>
<li>数据操作功能</li>
<li>数据库事务管理和运行管理</li>
<li>数据库的建立和维护功能</li>
<li>其他</li>
</ol>
<h3 id="3-数据库系统有几个特点？它与文件系统的本质区别是什么？"><a href="#3-数据库系统有几个特点？它与文件系统的本质区别是什么？" class="headerlink" title="3. 数据库系统有几个特点？它与文件系统的本质区别是什么？"></a>3. 数据库系统有几个特点？它与文件系统的本质区别是什么？</h3><h4 id="1-数据结构化"><a href="#1-数据结构化" class="headerlink" title="(1)数据结构化"></a>(1)数据结构化</h4><p>数据库系统实现整体数据结构化，这是数据库的主要功能之一，也是数据库系统与文件系统的本质区别。</p>
<p>文件系统中，记录的结构和记录之间的联系被固化在程序中，需要由程序员加以维护，既加重了程序员负担，又不利于结构变动</p>
<h4 id="2-数据的共享性高，冗余度低且易扩充"><a href="#2-数据的共享性高，冗余度低且易扩充" class="headerlink" title="(2)数据的共享性高，冗余度低且易扩充"></a>(2)数据的共享性高，冗余度低且易扩充</h4><p>数据共享可以大大减少数据冗余，节约存储空间。数据共享还能够避免数据之间的不相容性与不一致性。</p>
<h4 id="3-数据独立度高"><a href="#3-数据独立度高" class="headerlink" title="(3)数据独立度高"></a>(3)数据独立度高</h4><p>物理独立性：用户的应用程序与数据库中数据的物理结构是相互独立的。</p>
<p>逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的。</p>
<h4 id="4-数据由数据库管理系统统一管理和控制"><a href="#4-数据由数据库管理系统统一管理和控制" class="headerlink" title="(4)数据由数据库管理系统统一管理和控制"></a>(4)数据由数据库管理系统统一管理和控制</h4><p>数据库的共享将会带来数据库的安全隐患，为此数据库管理系统提供了<strong>数据库的安全性保护</strong>、<strong>数据库的完整性检查</strong>、<strong>并发控制</strong>和<strong>数据库恢复</strong>的数据控制功能。</p>
<h3 id="4-理解概念模型中的基本概念"><a href="#4-理解概念模型中的基本概念" class="headerlink" title="4.理解概念模型中的基本概念"></a>4.理解概念模型中的基本概念</h3><p>概念模型实际上是现实世界到机器世界的一个中间层次，它用于信息世界的建模，是现实世界到信息世界的第一层抽象，是数据库设计人员进行数据库设计的有力工具。</p>
<p>信息世界中的主要概念：</p>
<p><strong>实体</strong></p>
<p>客观存在并可相互区别的事务称为实体</p>
<p><strong>属性</strong></p>
<p>实体所具有的某一特性称为属性，用椭圆形表示</p>
<p><strong>码（key）</strong></p>
<p>唯一标识实体属性集称为码</p>
<p><strong>实体型</strong></p>
<p>用实体名及属性名集合来抽象和刻画同类实体，称为实体型，矩形框表示</p>
<p><strong>实体集</strong></p>
<p>同一类型实体的集合，如全体学生</p>
<p><strong>联系</strong></p>
<p>不同实体集之间的联系，有1V1、1Vn、nVn等多种类型</p>
<p><strong>概念模型的一种表示方式</strong>：实体联系方法（ER模型）</p>
<h3 id="5-什么是数据模型的三要素？有几种常用的数据模型。"><a href="#5-什么是数据模型的三要素？有几种常用的数据模型。" class="headerlink" title="5.什么是数据模型的三要素？有几种常用的数据模型。"></a>5.什么是数据模型的三要素？有几种常用的数据模型。</h3><h4 id="数据模型三要素："><a href="#数据模型三要素：" class="headerlink" title="数据模型三要素："></a>数据模型三要素：</h4><p>数据模型是严格定义的一组概念的集合，数据模型的三要素是<strong>数据结构</strong>、<strong>数据操作</strong>和<strong>完整性约束</strong>三部分组成。</p>
<ol>
<li>数据结构：描述数据库的组成对象以及对象之间的联系。是对系统静态特征的描述。</li>
<li>数据操作：数据库中各种对象的实例允许执行的操作的集合，包括操作及有关操作规则。数据操作是对系统动态特征的描述。</li>
<li>数据库的完整性约束条件：是一组完整性规则。</li>
</ol>
<h4 id="常用的数据模型："><a href="#常用的数据模型：" class="headerlink" title="常用的数据模型："></a>常用的数据模型：</h4><h5 id="1-层次模型"><a href="#1-层次模型" class="headerlink" title="(1) 层次模型"></a>(1) 层次模型</h5><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ol>
<li>层次模型的数据结构比较简单清晰</li>
<li>层次数据库的查询效率较高</li>
<li>提供了良好的完整性支持</li>
</ol>
<h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ol>
<li>现实世界很多联系是非层次的，如多对多</li>
<li>如果一个结点具有多个双亲结点，引入冗余，使应用程序编写复杂</li>
<li>查询子女结点必须通过双亲节点</li>
<li>由于结构严密，层次命令趋于程序化</li>
</ol>
<h5 id="2-网状模型"><a href="#2-网状模型" class="headerlink" title="(2)网状模型"></a>(2)网状模型</h5><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><ol>
<li>能够更为直接的描述现实世界</li>
<li>具有良好的性能，存取效率高</li>
</ol>
<h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ol>
<li>结构复杂，不利于最终用户掌握</li>
<li>网状模型的DDL、DML复杂，用户不容易掌握和使用</li>
<li>记录之间联系是通过存储路径实现的，因此用户必须掌握结构细节，加重编写应用程序的负担。</li>
</ol>
<h5 id="3-关系模型"><a href="#3-关系模型" class="headerlink" title="(3)关系模型"></a>(3)关系模型</h5><h6 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h6><ol>
<li>关系模式与格式化模型不同，它建立在严格的数学概念的基础上</li>
<li>关系模型的概念单一，数据结构简单、清晰，用户易懂易用</li>
<li>关系模型的存取路径对用户透明，具有更高的数据独立性、更好的安全保密性，也简化了程序员工作和数据库开发建立的工作</li>
</ol>
<h3 id="6-数据库系统的三级模式结构和两层映像。特点是什么？"><a href="#6-数据库系统的三级模式结构和两层映像。特点是什么？" class="headerlink" title="6.数据库系统的三级模式结构和两层映像。特点是什么？"></a>6.数据库系统的三级模式结构和两层映像。特点是什么？</h3><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/20409749.jpg" alt="数据库三级模式图"></p>
<h4 id="三级模式"><a href="#三级模式" class="headerlink" title="三级模式"></a>三级模式</h4><h5 id="1-模式"><a href="#1-模式" class="headerlink" title="1.模式"></a>1.模式</h5><p><strong>模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</strong>它是数据库系统模式结构的中间层。</p>
<h5 id="2-外模式"><a href="#2-外模式" class="headerlink" title="2.外模式"></a>2.外模式</h5><p><strong>外模式也称子模式或用户模式，他是数据库用户能够看见和使用的局部数据的逻辑结构和特征描述，是数据库用户的数据视图，是与某一用户有关的数据的逻辑表示。</strong></p>
<h5 id="3-内模式"><a href="#3-内模式" class="headerlink" title="3.内模式"></a>3.内模式</h5><p><strong>内模式也称存储模式，一个数据库只有一个内模式。他是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</strong></p>
<h4 id="两层映像"><a href="#两层映像" class="headerlink" title="两层映像"></a>两层映像</h4><h5 id="1-外模式／模式映像"><a href="#1-外模式／模式映像" class="headerlink" title="1.外模式／模式映像"></a>1.外模式／模式映像</h5><p>模式描述的是数据的全局逻辑结构，外模式描述的是数据的局部逻辑结构，对于同一个模式可以有任意多个外模式，对于每一个外模式，数据库系统都有一个外模式／模式映像，它定义了该外模式与模式的对应关系。</p>
<p><strong>当模式改变时，由数据库管理员对各个外模式／模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性。</strong></p>
<h5 id="2-模式／内模式映像"><a href="#2-模式／内模式映像" class="headerlink" title="2.模式／内模式映像"></a>2.模式／内模式映像</h5><p>数据库中只有一个模式，也只有一个内模式，所以模式／内模式映像是唯一的，它定义了数据全局逻辑与存储结构之间的对应关系。<strong>当数据库的存储结构改变时，由数据库管理员对模式／内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性。</strong></p>
<h3 id="7-开发、管理和使用数据库的人员有哪几类？"><a href="#7-开发、管理和使用数据库的人员有哪几类？" class="headerlink" title="7.开发、管理和使用数据库的人员有哪几类？"></a>7.开发、管理和使用数据库的人员有哪几类？</h3><p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/57039615.jpg" alt=""></p>
<h4 id="1-数据库管理员（DBA）"><a href="#1-数据库管理员（DBA）" class="headerlink" title="1.数据库管理员（DBA）"></a>1.数据库管理员（DBA）</h4><p>负责全面控制和管理数据库系统</p>
<h4 id="2-系统分析员和数据库设计人员"><a href="#2-系统分析员和数据库设计人员" class="headerlink" title="2.系统分析员和数据库设计人员"></a>2.系统分析员和数据库设计人员</h4><p>分析员负责应用系统的需求分析和规范说明，参与数据库系统概要设计</p>
<p>设计人员负责数据库中数据的确定及数据库各级模式的设计</p>
<h4 id="3-应用程序员"><a href="#3-应用程序员" class="headerlink" title="3.应用程序员"></a>3.应用程序员</h4><p>负责设计和编写应用系统模块，并进行调试和安装</p>
<h4 id="4-用户"><a href="#4-用户" class="headerlink" title="4.用户"></a>4.用户</h4><p>指最终用户，通过应用系统的用户接口使用数据库</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="1-理解关系的有关术语并会判断"><a href="#1-理解关系的有关术语并会判断" class="headerlink" title="1.理解关系的有关术语并会判断"></a>1.理解关系的有关术语并会判断</h3><h4 id="1-域"><a href="#1-域" class="headerlink" title="(1)域"></a>(1)域</h4><p>一组具有相同数据类型的值的集合</p>
<p>例如：自然数、整数、长度小于25字节的字符串集合、{0,1}、{男、女}等</p>
<h4 id="2-笛卡尔积"><a href="#2-笛卡尔积" class="headerlink" title="(2)笛卡尔积"></a>(2)笛卡尔积</h4><p>笛卡尔积是域上的一种集合运算，就是把两个表相乘。</p>
<p>一个域允许的不同取值个数称为这个域的<strong>基数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D1×D2×···×Dn=&#123;(d1,d2,···,dn) | di∈Di，i=1,2,···，n&#125;</div></pre></td></tr></table></figure>
<p>例子，设有两个域：姓名集D1={李倩，王刚，张体宁} 和 性别集D2={男，女}。则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">设有两个域：姓名集D1=&#123;李倩，王刚，张体宁&#125; 和 性别集D2=&#123;男，女&#125;。</div></pre></td></tr></table></figure>
<p>这六个<strong>元组</strong>可构成一张二维表，表中部分元组称作其子集。</p>
<table>
<thead>
<tr>
<th style="text-align:center">D1</th>
<th style="text-align:center">D2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">李倩</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">王刚</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">张体宁</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">李倩</td>
<td style="text-align:center">男</td>
</tr>
<tr>
<td style="text-align:center">王刚</td>
<td style="text-align:center">男</td>
</tr>
<tr>
<td style="text-align:center">张体宁</td>
<td style="text-align:center">男</td>
</tr>
</tbody>
</table>
<h4 id="3-关系"><a href="#3-关系" class="headerlink" title="(3)关系"></a>(3)关系</h4><p>D1xD2xD3…Dn的子集叫做在域D1，D2，…，Dn上的<strong>关系</strong></p>
<p><strong>候选码的定义</strong>：如果关系中的某一属性组的值能唯一地标识一个元祖，则称该属性组为候选码；</p>
<p><strong>主码的定义</strong>：如果一个关系有多个候选码，则选定其中一个为主码；</p>
<p><strong>主属性定义</strong>：候选码的诸属性称为主属性；</p>
<p><strong>非主属性定义</strong>：不包含在任何候选码中的属性称为非主属性；</p>
<p><strong>全码</strong>：最极端的情况下，所有属性都为候选码，成为全码</p>
<p><strong>关系的三种类型</strong>：基本关系（基本表）、查询表和视图表。基本表是实际存在的表，它是实际存储数据的逻辑表示；查询表是查询结果对应的表；视图表是由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据。</p>
<h3 id="2-理解基本关系的6条性质"><a href="#2-理解基本关系的6条性质" class="headerlink" title="2.理解基本关系的6条性质"></a>2.理解基本关系的6条性质</h3><ol>
<li>列是同质的，即每一列中的分量是同一类型的数据，来自同一个域。</li>
<li>不同的列可出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名。</li>
<li>列的顺序无所谓，即列的次序可以任意交换。</li>
<li>任意两个元组的候选码不能取相同的值</li>
<li>行的顺序无所谓，可以任意交换</li>
<li>分量必须取原子值，即每一个分量是不可分的数据项<strong>（最基本的一条）</strong></li>
</ol>
<h3 id="3-理解实体完整性、参照完整性的规则并举例"><a href="#3-理解实体完整性、参照完整性的规则并举例" class="headerlink" title="3.理解实体完整性、参照完整性的规则并举例"></a>3.理解实体完整性、参照完整性的规则并举例</h3><p>关系模式中有三类完整性约束：<strong>实体完整性</strong>、<strong>参照完整性</strong>和<strong>用户定义的完整性</strong>。</p>
<h4 id="1-实体完整性规则"><a href="#1-实体完整性规则" class="headerlink" title="(1)实体完整性规则"></a>(1)实体完整性规则</h4><p><strong>若一个属性A是基本关系R的主属性，则A不能取空值。</strong></p>
<p>例如：学生（<u>学号</u>、姓名、性别、专业号、年龄）关系中学号为主码，则学号不能取空值。</p>
<p><strong>如果主码由若干属性组成，则这些主属性都不能取空值</strong></p>
<p>例如：选修（<u>学号、课程号</u>、成绩）关系中，“学号、课程号“为主码，则两个属性都不能取空值</p>
<p>对于实体完整性规则如下：</p>
<ol>
<li>实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。例如学生关系对应于学生的集合。</li>
<li>现实世界中的实体是不可区分的，即他们具有某种唯一性标识。例如每个学生都是独立的个体。</li>
<li>关系模型中的主码作为唯一性标识。</li>
<li>主码的属性既主属性不能取空值。</li>
</ol>
<h4 id="2-参照完整性规则"><a href="#2-参照完整性规则" class="headerlink" title="(2)参照完整性规则"></a>(2)参照完整性规则</h4><p>若属性F是基本关系R的外码，它与基本关系S的主码Ks相对应，则对于R中的每个元组F上的值必须：</p>
<ul>
<li>或者取空值（F的每个属性值均为空值）</li>
<li>或者等于S中某个元组的主码值</li>
</ul>
<p>例如：</p>
<p>学生（<u>学号</u>，姓名，性别，专业号，年龄）</p>
<p>专业（<u>专业号</u>，专业名）</p>
<p>学生关系中的每个元组的“专业号”属性只能取下面两类值：</p>
<ul>
<li>空值，表示尚未给该学生分配专业</li>
<li>非空值，该值必须对应专业关系中某个元组的“专业号”值</li>
</ul>
<h3 id="4-理解关系的外码、参照关系、被参照关系"><a href="#4-理解关系的外码、参照关系、被参照关系" class="headerlink" title="4.理解关系的外码、参照关系、被参照关系"></a>4.理解关系的外码、参照关系、被参照关系</h3><p>设F是基本关系R的一个或一组属性，但不是关系的码，Ks是基本关系S的主码。如果F和Ks相对应，则称F是R的<strong>外码</strong>，并称基本关系R为<strong>参照关系</strong>，基本关系S为<strong>被参照关系</strong>或目标关系</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/2282416.jpg" alt=""></p>
<h3 id="5-理解元组、分量、连接、象集等概念和记号表示及判断"><a href="#5-理解元组、分量、连接、象集等概念和记号表示及判断" class="headerlink" title="5.理解元组、分量、连接、象集等概念和记号表示及判断"></a>5.理解元组、分量、连接、象集等概念和记号表示及判断</h3><p>每一个元素{d1，d2，…，dn}叫做一个<strong>n元组</strong>，或简称<strong>元组</strong>。元素中的每一个值di叫做一个分量。</p>
<p><strong>连接</strong>也称θ连接。他是从两个关系的笛卡尔积中选取属性间满足一定条件的元组。记作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">R∞S=&#123;tr ts|(tr∈R) ∧ (ts ∈S) ∧ tr[A] θ ts[B] &#125;</div><div class="line">AθB</div></pre></td></tr></table></figure>
<p>连接运算从R和S的笛卡尔积RxS中选取R关系在A属性组上的值与S关系在B属性组上的值满足比较关系θ的元组</p>
<p><strong>象集</strong>的概念。<br>在关系R中属性A可以取四个值｛a1,a2,a3,a4}其中<br>a1的象集为｛(b1,c2),(b2,c3),(b2,c1)}<br>a2的象集为｛(b3,c7),(b2,c3)}<br>a3的象集为｛(b4,c6)}<br>a4的象集为｛(b6,c6)} </p>
<p><strong>R:</strong></p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>b1</td>
<td>c2</td>
</tr>
<tr>
<td>a2</td>
<td>b3</td>
<td>c7</td>
</tr>
<tr>
<td>a3</td>
<td>b4</td>
<td>c6</td>
</tr>
<tr>
<td>a1</td>
<td>b2</td>
<td>c3</td>
</tr>
<tr>
<td>a4</td>
<td>b6</td>
<td>c6</td>
</tr>
<tr>
<td>a2</td>
<td>b2</td>
<td>c3</td>
</tr>
<tr>
<td>a1</td>
<td>b2</td>
<td>c1</td>
</tr>
</tbody>
</table>
<h3 id="6-理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式"><a href="#6-理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式" class="headerlink" title="6.理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式"></a>6.理解各种关系代数运算及特点。要求分析给定关系的运算结果；以及根据要求完成的操作结果给出相应的运算式</h3><p>关系运算包括：选择、投影、连接、除等。</p>
<p>设t为R的元组变量，R(U)=R(A1，A2，···，An)，则引入记号：</p>
<blockquote>
<p>t[A]：表示关系R在A属性（组）上的所有值。</p>
</blockquote>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>选择是在<strong>关系行上进行的元组挑选</strong>，结果产生同类关系。运算表达式如下：</p>
<blockquote>
<p>σF(R)={t | t∈R ∧ F(t)=true }</p>
</blockquote>
<p>σF(R)表示从关系R中选出满足条件表达式F的那些元组所构成的关系。其中F由属性名（值）、比较符、逻辑运算符组成。</p>
<p>看个例子</p>
<p>R:</p>
<table>
<thead>
<tr>
<th>A1</th>
<th>A2</th>
<th>A3</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>2</td>
<td>d</td>
</tr>
<tr>
<td>a</td>
<td>3</td>
<td>f</td>
</tr>
<tr>
<td>b</td>
<td>2</td>
<td>d</td>
</tr>
<tr>
<td>c</td>
<td>2</td>
<td>d</td>
</tr>
<tr>
<td>e</td>
<td>6</td>
<td>f</td>
</tr>
<tr>
<td>g</td>
<td>6</td>
<td>f</td>
</tr>
</tbody>
</table>
<p>则σA2&gt;5 (R)</p>
<table>
<thead>
<tr>
<th>A1</th>
<th>A2</th>
<th>A3</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td>6</td>
<td>f</td>
</tr>
<tr>
<td>g</td>
<td>6</td>
<td>f</td>
</tr>
</tbody>
</table>
<h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>投影运算时在关系列上进行的选择，结果产生不同类关系。运算式表示如下：</p>
<blockquote>
<p>ΠA(R)={t[a] | (t∈R)}</p>
</blockquote>
<p>继续使用上面的例子，上面例子中对应的ΠA3,A2(R)为：</p>
<table>
<thead>
<tr>
<th>A3</th>
<th>A2</th>
</tr>
</thead>
<tbody>
<tr>
<td>f</td>
<td>3</td>
</tr>
<tr>
<td>d</td>
<td>2</td>
</tr>
<tr>
<td>f</td>
<td>6</td>
</tr>
</tbody>
</table>
<h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>设关系R(X,Y)和S(Y,Z)，X，Y，Z为属性组。X属性上的值为Xi。则：</p>
<blockquote>
<p>R÷S= {t[X] | t∈R ∧ ΠY(S)⊆YX}</p>
</blockquote>
<p>求 R÷S步骤如下：</p>
<blockquote>
<ol>
<li>求ΠX(R)</li>
<li>求ΠY(S)</li>
<li>YX为Xi在R中的象集，他表示R中属性组X上值为xi的诸元素在Y上分量的集合</li>
<li>R÷S运算结果为：象集YX包含了ΠY(S)的xi</li>
</ol>
</blockquote>
<p>求象集YX的方法为：对于每个值xi，xi∈Πx(R),求ΠY(σX=xi(R))</p>
<p>看个例子</p>
<p>关系R中A可以取{a1,a2,a3,a4}</p>
<p>a1的象集为a1的象集为｛(b1,c2),(b2,c3),(b2,c1)}<br>a2的象集为｛(b3,c7),(b2,c3)}<br>a3的象集为｛(b4,c6)}<br>a4的象集为｛(b6,c6)}<br>S在（B,C）上的投影为｛(b1,c2),(b2,c3),(b2,c1) }. </p>
<p>因此只有a1的象集包含了S在（B，C）上的投影，所以</p>
<p>R➗S={a1}</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/78829772.jpg" alt=""></p>
<h3 id="7-掌握等值连接与自然连接之间的区别"><a href="#7-掌握等值连接与自然连接之间的区别" class="headerlink" title="7.掌握等值连接与自然连接之间的区别"></a>7.掌握等值连接与自然连接之间的区别</h3><p>连接是在两个关系的笛卡尔积基础上再做选择运算得到的关系。如果连接条件相等，则称是等值连接，否则为不等值连接。在等值连接的基础上去除重复的列，则为自然连接。</p>
<p>一张图说明</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/22256984.jpg" alt=""></p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="1-SQL的特点和基本概念"><a href="#1-SQL的特点和基本概念" class="headerlink" title="1.SQL的特点和基本概念"></a>1.SQL的特点和基本概念</h3><h4 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h4><h5 id="1-综合统一"><a href="#1-综合统一" class="headerlink" title="(1)综合统一"></a>(1)综合统一</h5><p>数据库系统的主要功能是通过数据库支持的数据语言来实现的，SQL集数据定义语言、数据操纵语言、数据控制语言的功能于一体，语言风格统一，可以独立完成数据库生命周期中的全部活动</p>
<h5 id="2-高度非过程化"><a href="#2-高度非过程化" class="headerlink" title="(2)高度非过程化"></a>(2)高度非过程化</h5><p>只要提出做什么，而无须指明怎么做，因此无需了解存储路径。</p>
<h5 id="3-面向集合的操作方式"><a href="#3-面向集合的操作方式" class="headerlink" title="(3)面向集合的操作方式"></a>(3)面向集合的操作方式</h5><p>SQL采用集合操作方式，不仅操作对象、查找结果可以是元组的集合，而且一次插入、删除、更新操作的对象也可以是元组的集合</p>
<h5 id="4-以一种语法结构提供多种使用方式"><a href="#4-以一种语法结构提供多种使用方式" class="headerlink" title="(4)以一种语法结构提供多种使用方式"></a>(4)以一种语法结构提供多种使用方式</h5><p>SQL既是独立的语言，又是嵌入式语言，能够嵌入到高级语言（java、c++等）程序中</p>
<h5 id="5-语言简洁，易学易用"><a href="#5-语言简洁，易学易用" class="headerlink" title="(5)语言简洁，易学易用"></a>(5)语言简洁，易学易用</h5><p>设计巧妙，语言简洁，接近口语</p>
<h4 id="SQL的基本概念"><a href="#SQL的基本概念" class="headerlink" title="SQL的基本概念"></a>SQL的基本概念</h4><p>支持SQL的关系数据库管理系统同样支持关系数据库的三级模式结构。其中外模式包括若干视图和部分基本表，数据库模式包括若干基本表，内模式包括若干存储文件。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-6-21/54502437.jpg" alt=""></p>
<h3 id="2-掌握创建数据库、表、架构（模式）、完整性的SQL语句"><a href="#2-掌握创建数据库、表、架构（模式）、完整性的SQL语句" class="headerlink" title="2.掌握创建数据库、表、架构（模式）、完整性的SQL语句"></a>2.掌握创建数据库、表、架构（模式）、完整性的SQL语句</h3><h4 id="1-SQL模式的创建和删除"><a href="#1-SQL模式的创建和删除" class="headerlink" title="(1)SQL模式的创建和删除"></a>(1)SQL模式的创建和删除</h4><h5 id="模式创建"><a href="#模式创建" class="headerlink" title="模式创建"></a>模式创建</h5><p>模式(架构)是一个对象的容器，它包含表、视图、存储过程等数据对象的容器。从包含关系上来讲，模式位于数据库内部，而数据库位于服务器内部。</p>
<p>SQL模式的创建可以用CREATE语句实现，句法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span>&lt;模式名&gt;AUTHORIZATION &lt;用户名&gt;</div></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> “S-T” AUTHORIZATION WANG</div></pre></td></tr></table></figure>
<p>为用户wang定义了一个学生-课程模式S-T</p>
<h5 id="模式删除"><a href="#模式删除" class="headerlink" title="模式删除"></a>模式删除</h5><p>当一个SQL模式及其所属的基本表、视图等元素都不需要时，可以用<code>DROP</code>语句删除这个SQL模式：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> &lt;模式名&gt;[<span class="keyword">CASCADE</span>|RESTRICT]</div></pre></td></tr></table></figure>
<p><strong><code>CASCADE</code></strong>（级联）方式：执行DROP语句时，把SQL模式及其下属的基本表、视图、索引等所有元素全部删除。</p>
<p><strong><code>RESTRICT</code></strong>（限制）方式：执行DROP语句时，只有当SQL模式中没有任何下属元素时，才能删除SQL模式。</p>
<h4 id="2-基本表的创建"><a href="#2-基本表的创建" class="headerlink" title="(2)基本表的创建"></a>(2)基本表的创建</h4><p>SQL使用<code>CREAT TABLE</code>语句定义基本表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;(&lt;列定义&gt;[&#123;,&lt;列定义&gt;,&lt;完整性约束&gt;&#125;])</div></pre></td></tr></table></figure>
<p>例如</p>
<p>例如：建立一个学生基本表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S  ( S#  <span class="built_in">CHAR</span>(<span class="number">4</span>),</div><div class="line">                  SN  <span class="built_in">CHAR</span>(<span class="number">8</span>),</div><div class="line">                  AGE  <span class="built_in">SMALLINT</span>,</div><div class="line">                SEX <span class="built_in">CHAR</span>(<span class="number">2</span>)  <span class="keyword">DEFAULT</span>’男‘,</div><div class="line">              DEPT <span class="built_in">CHAR</span>(<span class="number">2</span>));</div></pre></td></tr></table></figure>
<h3 id="3-什么是唯一索引？聚簇索引？定义索引的SQL语句是什么？理解聚簇索引的作用及使用时应注意的问题。"><a href="#3-什么是唯一索引？聚簇索引？定义索引的SQL语句是什么？理解聚簇索引的作用及使用时应注意的问题。" class="headerlink" title="3.什么是唯一索引？聚簇索引？定义索引的SQL语句是什么？理解聚簇索引的作用及使用时应注意的问题。"></a>3.什么是唯一索引？聚簇索引？定义索引的SQL语句是什么？理解聚簇索引的作用及使用时应注意的问题。</h3><h4 id="1-唯一索引"><a href="#1-唯一索引" class="headerlink" title="(1)唯一索引"></a>(1)唯一索引</h4><p><strong><code>unique</code>（distinct）</strong>：唯一性索引，不允许表在索引列不同的行取相同值。若已有相同值存在，则系统给出相关信息，不建此索引。系统并拒绝违背唯一性的插入、更新。</p>
<h4 id="2-聚簇索引"><a href="#2-聚簇索引" class="headerlink" title="(2)聚簇索引"></a>(2)聚簇索引</h4><p><strong><code>cluster</code></strong>：聚簇索引，将数据行的键值在表内排序并存储对应的数据记录，使得数据表<strong>记录的物理顺序与索引项的顺序一致</strong>。当以某字段作为关键字建立聚集索引时，表中数据以该字段作为排序根据。因此，一个表只能建立一个聚集索引，但该索引可以包含多个列（组合索引）</p>
<p>经常更新的列不宜建立聚簇索引。</p>
<h4 id="3-定义索引"><a href="#3-定义索引" class="headerlink" title="(3)定义索引"></a>(3)定义索引</h4><p>在SQL语言中，建立索引使用CREATE INDEX语句，其格式一般为</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] <span class="keyword">INDEX</span> &lt;索引名&gt; <span class="keyword">ON</span> &lt;表名&gt;(&lt;列名&gt;[&#123;,&lt;列名&gt;&#125;])</div></pre></td></tr></table></figure>
<h4 id="4-聚簇索引的作用及使用时应注意的问题"><a href="#4-聚簇索引的作用及使用时应注意的问题" class="headerlink" title="(4)聚簇索引的作用及使用时应注意的问题"></a>(4)聚簇索引的作用及使用时应注意的问题</h4><p>作用：提高某个属性（属性组）的查询速度。</p>
<p>注意：经常更新的列不宜建立聚簇索引。</p>
<h3 id="4-数据的查询与更新。-Select（单表查询、条件表示、聚集函数；连接、存在谓词、嵌套、集合查询等），insert-、delete-、update。"><a href="#4-数据的查询与更新。-Select（单表查询、条件表示、聚集函数；连接、存在谓词、嵌套、集合查询等），insert-、delete-、update。" class="headerlink" title="4.数据的查询与更新。  Select（单表查询、条件表示、聚集函数；连接、存在谓词、嵌套、集合查询等），insert 、delete 、update。"></a>4.数据的查询与更新。  Select（单表查询、条件表示、聚集函数；连接、存在谓词、嵌套、集合查询等），insert 、delete 、update。</h3><h4 id="1-单表查询和条件查询"><a href="#1-单表查询和条件查询" class="headerlink" title="(1)单表查询和条件查询"></a>(1)单表查询和条件查询</h4><p>单表查询是指仅涉及一个表的查询</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> S#,AGE,SEX,… <span class="keyword">FROM</span> S</div></pre></td></tr></table></figure>
<h5 id="选择列"><a href="#选择列" class="headerlink" title="选择列"></a>选择列</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查询制定列</div><div class="line"><span class="keyword">SELECT</span> Sno,Sname</div><div class="line"><span class="keyword">FROM</span> Student;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查询全部列</div><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> Student;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查询算术表达式计算的值</div><div class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2014</span>-Sage</div><div class="line"><span class="keyword">FROM</span> Student;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查询函数计算的值</div><div class="line"><span class="keyword">SELECT</span> Sname,<span class="keyword">LOWER</span>(Sdept)</div><div class="line"><span class="keyword">FROM</span> Student;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">改变查询结果的列标题</div><div class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2014</span>-Sage BIRTHDAY</div><div class="line"><span class="keyword">FROM</span> Student;</div></pre></td></tr></table></figure>
<h5 id="选择行"><a href="#选择行" class="headerlink" title="选择行"></a>选择行</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">消除取值重复的行</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</div><div class="line"><span class="keyword">FROM</span> SC;</div><div class="line">若无指定DISTINCT,则默认为ALL,等价于</div><div class="line"><span class="keyword">SELECT</span> ALL Sno</div><div class="line"><span class="keyword">FROM</span> SC;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">查询满足条件的行</div><div class="line">1.比较大小</div><div class="line"><span class="keyword">SELECT</span> Sno,Sname</div><div class="line"><span class="keyword">FROM</span> Student</div><div class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>;</div><div class="line">2.确定范围</div><div class="line"><span class="keyword">SELECT</span> Sno,Sname</div><div class="line"><span class="keyword">FROM</span> Student</div><div class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</div><div class="line">3.确定集合</div><div class="line"><span class="keyword">SELECT</span> Sno,Sname</div><div class="line"><span class="keyword">FROM</span> Student</div><div class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span>(<span class="string">'CS'</span>,<span class="string">'MA'</span>,<span class="string">'IS'</span>);</div><div class="line">4.涉及空值的查询</div><div class="line"><span class="keyword">SELECT</span> Sno,Sname</div><div class="line"><span class="keyword">FROM</span> Student</div><div class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IS</span> <span class="literal">NULL</span>;</div></pre></td></tr></table></figure>
<h5 id="ORDER-BY子句-升序-ASC-降序-DESC"><a href="#ORDER-BY子句-升序-ASC-降序-DESC" class="headerlink" title="ORDER BY子句(升序 ASC 降序 DESC)"></a>ORDER BY子句(升序 ASC 降序 DESC)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">按学号降序查询</div><div class="line"><span class="keyword">SELECT</span> Sno,Sname</div><div class="line"><span class="keyword">FROM</span> Student</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Sno <span class="keyword">DESC</span>;</div></pre></td></tr></table></figure>
<h4 id="2-聚集函数"><a href="#2-聚集函数" class="headerlink" title="(2)聚集函数"></a>(2)聚集函数</h4><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">COUNT([DISTINCT\</td>
<td style="text-align:center">ALL] &lt;列名&gt;)</td>
<td>统计一列中值的个数</td>
</tr>
<tr>
<td style="text-align:center">SUM([DISTINCT\</td>
<td style="text-align:center">ALL] &lt;列名&gt;)</td>
<td>计算一列值的总和（此列必须是数值型）</td>
</tr>
<tr>
<td style="text-align:center">AVG([DISTINCT\</td>
<td style="text-align:center">ALL] &lt;列名&gt;)</td>
<td>计算一列值的平均值（此列必须是数值型）</td>
</tr>
<tr>
<td style="text-align:center">MAX([DISTINCT\</td>
<td style="text-align:center">ALL] &lt;列名&gt;)</td>
<td>求一列值中的最大值</td>
</tr>
<tr>
<td style="text-align:center">MIN([DISTINCT\</td>
<td style="text-align:center">ALL] &lt;列名&gt;)</td>
<td>求一列值中的最小值</td>
</tr>
</tbody>
</table>
<h4 id="3-连接"><a href="#3-连接" class="headerlink" title="(3)连接"></a>(3)连接</h4><p>在查询中，同时涉及两个或两个以上的表，要根据表中数据的情况作连接。</p>
<p>连接查询包括：</p>
<ul>
<li>等值连接</li>
<li>自身连接</li>
<li>外连接</li>
</ul>
<h5 id="1）等值连接"><a href="#1）等值连接" class="headerlink" title="1）等值连接"></a>1）等值连接</h5><p>示例：查询学习课程名为‘MATHS’的学生学号和姓名。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>   s.sno,sname </div><div class="line"><span class="keyword">from</span>    s,sc,c  </div><div class="line"><span class="keyword">where</span>  s.sno=sc.sno <span class="keyword">and</span> sc.cno=c.cno</div><div class="line"><span class="keyword">and</span> cname=<span class="string">'MATHS'</span>;</div></pre></td></tr></table></figure>
<h5 id="2-自连接"><a href="#2-自连接" class="headerlink" title="2)自连接"></a>2)自连接</h5><p>一个表与其自身进行的连接</p>
<p>示例：检索每一门课的间接先修课</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> A.CNO,B.CPNO </div><div class="line"><span class="keyword">FROM</span>  (COURSE A, COURSE B)</div><div class="line"><span class="keyword">WHERE</span>  A.CPNO=B.CNO</div></pre></td></tr></table></figure>
<h5 id="3）外连接"><a href="#3）外连接" class="headerlink" title="3）外连接"></a>3）外连接</h5><p>在通常的连接操作中，只有满足条件的元组才能作为结果输出。但是有时想以Student表作为主体列出所有学生的选课情况，若某个学生没有选课，则仍<strong>把Student作为悬浮元组保存在结果关系中</strong>。</p>
<p>示例</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> student.*,SC.Cno,SC.Grade</div><div class="line"><span class="keyword">FROM</span> student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> (student.sno=SC.sno);</div></pre></td></tr></table></figure>
<p>去除重复元素</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> student.*,SC.Cno,SC.Grade</div><div class="line"><span class="keyword">FROM</span> student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">USING</span>(Sno);</div></pre></td></tr></table></figure>
<h4 id="4-嵌套查询"><a href="#4-嵌套查询" class="headerlink" title="(4)嵌套查询"></a>(4)嵌套查询</h4><p>Select在一个select语句的where子句中，又出现了另一个select语句，这种查询称为嵌套查询。子查询中还可以嵌入子查询。 </p>
<h5 id="in-子查询"><a href="#in-子查询" class="headerlink" title="in 子查询"></a>in 子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>    SNO,SNAME</div><div class="line"><span class="keyword">from</span>     S</div><div class="line"><span class="keyword">where</span>   SNO   <span class="keyword">in</span></div><div class="line">  (<span class="keyword">select</span>    SNO</div><div class="line">  <span class="keyword">from</span>     SC</div><div class="line">  <span class="keyword">where</span>   CNO = <span class="string">'C1'</span>);</div></pre></td></tr></table></figure>
<h5 id="any-all子查询"><a href="#any-all子查询" class="headerlink" title="any/all子查询"></a>any/all子查询</h5><p><code>ANY</code> ：表达式的值<u>至少与子查询结果中的<strong>一个</strong>值</u>相比能满足比较运算符 。</p>
<p><code>ALL</code>：表达式的值<u>与子查询结果中的<strong>所有</strong>的值</u>相比都满足比较运算符。</p>
<p>示例：检索至少有一门成绩超过学生S4一门成绩的学生学号</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> sno <span class="keyword">FROM</span> SC </div><div class="line"><span class="keyword">WHERE</span> grade &gt;<span class="keyword">any</span> </div><div class="line">   (<span class="keyword">SELECT</span> grade <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> sno=<span class="string">'S4'</span>)</div><div class="line"><span class="keyword">AND</span> sno&lt;&gt;<span class="string">'S4'</span></div></pre></td></tr></table></figure>
<p>示例：检索<strong>平均成绩最高</strong>的学生学号</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> SNO</div><div class="line"><span class="keyword">from</span> SC</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> SNO</div><div class="line"><span class="keyword">having</span> <span class="keyword">avg</span>(GRADE) &gt;=  all</div><div class="line">        (<span class="keyword">select</span> <span class="keyword">avg</span>(GRADE)</div><div class="line">           <span class="keyword">from</span> SC</div><div class="line">           <span class="keyword">group</span> <span class="keyword">by</span> SNO);</div></pre></td></tr></table></figure>
<h5 id="exists查询"><a href="#exists查询" class="headerlink" title="exists查询"></a>exists查询</h5><p>带有EXISTS谓词的子查询不返回任何实际数据，它只产生逻辑真值“true”或逻辑假值“false”。</p>
<p>示例：列出选修了1号课程的学生的学号及姓名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>    SNO,SNAME</div><div class="line"><span class="keyword">from</span>     S     </div><div class="line"><span class="keyword">where</span>   <span class="keyword">exists</span> </div><div class="line">     (<span class="keyword">select</span>   *   <span class="keyword">from</span>   SC</div><div class="line">         <span class="keyword">where</span>  SNO = S.SNO  <span class="keyword">and</span>  CNO = <span class="string">'1'</span>)</div></pre></td></tr></table></figure>
<p>示例：检索男生中不学C2课程的学生姓名。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> s </div><div class="line"><span class="keyword">where</span> s.sex=<span class="string">'M'</span> <span class="keyword">and</span>  <span class="keyword">not</span>  <span class="keyword">exists</span></div><div class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> s.sno=sc.sno <span class="keyword">and</span> cno=<span class="string">'C2'</span>)</div></pre></td></tr></table></figure>
<p><code>not  exists</code>–当集合为空，值为true，否则为false</p>
<h4 id="5-集合查询"><a href="#5-集合查询" class="headerlink" title="(5)集合查询"></a>(5)集合查询</h4><p><code>Select</code>语句的结果是一个元组的集合，多个Select语句的结果可以进行集合操作</p>
<ul>
<li>属性个数必须一致</li>
<li>对应的类型必须一致</li>
<li>属性名无关，最后结果集采用第一个结果的属性名</li>
<li>缺省为自动去除重复元组</li>
<li>只能在整个语句的最后使用一次<code>Order By</code></li>
</ul>
<p>集合并： <code>union</code> </p>
<p>集合交：<code>intersect</code></p>
<p>集合差：<code>except</code>  </p>
<p>示例：查询姓“张”的学生及年龄不大于19岁的学生(按年龄排序)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> sno,sname <span class="keyword">as</span> <span class="keyword">Name</span> ,age</div><div class="line">    <span class="keyword">From</span> S</div><div class="line">    <span class="keyword">Where</span> sname    <span class="keyword">like</span>     <span class="string">'张%'</span></div><div class="line"> <span class="keyword">Union</span></div><div class="line">    <span class="keyword">Select</span> sno,sname,age</div><div class="line">    <span class="keyword">From</span> S</div><div class="line">    <span class="keyword">Where</span> age &lt;=<span class="number">19</span></div><div class="line">    <span class="keyword">Order</span> <span class="keyword">By</span> age;</div></pre></td></tr></table></figure>
<p>示例：求选修了001或002号而没有选003号课程的学生号</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">（<span class="keyword">select</span>     SNO</div><div class="line"> <span class="keyword">from</span>       SC</div><div class="line"> <span class="keyword">where</span>     CNO = ‘C1’  <span class="keyword">or</span>  CNO = ‘C2’ ）</div><div class="line">    <span class="keyword">except</span></div><div class="line">（<span class="keyword">select</span>     SNO</div><div class="line"> <span class="keyword">from</span>       SC</div><div class="line"> <span class="keyword">where</span>     CNO = ‘C3’）</div></pre></td></tr></table></figure>
<h4 id="5-INSERT"><a href="#5-INSERT" class="headerlink" title="(5)INSERT"></a>(5)INSERT</h4><p>插入单个元组的INSERT语句的格式为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span></div><div class="line"><span class="keyword">INTO</span> &lt;表名&gt; [(&lt;属性列<span class="number">1</span>&gt;[,&lt;属性列<span class="number">2</span>&gt;...)]</div><div class="line"><span class="keyword">VALUES</span> (&lt;常量<span class="number">1</span>&gt; [,&lt;常量<span class="number">2</span>&gt;]...)</div></pre></td></tr></table></figure>
<p>示例：插入一条数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Insert</span>  <span class="keyword">Into</span>  S</div><div class="line">  <span class="keyword">Values</span> (<span class="string">'s8'</span>,<span class="string">'张三'</span>,<span class="number">21</span>,<span class="string">'M'</span>,<span class="string">'JSJ'</span>)</div></pre></td></tr></table></figure>
<p>示例：插入子查询结果</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>    s_grade(sno,avg_grade)</div><div class="line"><span class="keyword">SELECT</span> sno,<span class="keyword">avg</span>(grade)</div><div class="line"><span class="keyword">FROM</span> SC </div><div class="line"><span class="keyword">WHERE</span> sno <span class="keyword">IN</span></div><div class="line">   (<span class="keyword">SELECT</span> sno <span class="keyword">FROM</span> S <span class="keyword">WHERE</span> sex=<span class="string">'M'</span>)</div><div class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> sno </div><div class="line">    <span class="keyword">HAVING</span> <span class="keyword">avg</span>(grade)&gt;<span class="number">80</span></div></pre></td></tr></table></figure>
<h4 id="6-UPADTE"><a href="#6-UPADTE" class="headerlink" title="(6)UPADTE"></a>(6)UPADTE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> 表名  </div><div class="line"><span class="keyword">set</span>    列名 = 表达式 | 子查询</div><div class="line">     列名 = [，表达式 | 子查询]…</div><div class="line">     [<span class="keyword">where</span>  条件表达式]</div></pre></td></tr></table></figure>
<p>示例：将S1学生转入CS系</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Update</span> S</div><div class="line"><span class="keyword">Set</span>  dept = ‘CS<span class="string">'</span></div><div class="line">Where sno = 'S1‘</div></pre></td></tr></table></figure>
<p>示例：所有学生年龄加1</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Update</span> S</div><div class="line"><span class="keyword">Set</span>  age = age + <span class="number">1</span></div></pre></td></tr></table></figure>
<p>示例：(带子查询的修改)将计算机系全体学生的成绩置零。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Update</span> SC</div><div class="line"><span class="keyword">Set</span> grade =<span class="number">0</span></div><div class="line"><span class="keyword">Where</span>  <span class="string">'CS‘=(Select Sdept</span></div><div class="line">              From Student</div><div class="line">              Where Student.Sno=SC.Sno)</div></pre></td></tr></table></figure>
<h4 id="7-DELETE"><a href="#7-DELETE" class="headerlink" title="(7)DELETE"></a>(7)DELETE</h4><p>DELETE语句的功能是从指定表中删除满足</p>
<p>WHERE子句条件的所有元组。如果省略WHERE子句，表示删除表中全部元组，但表的定义仍在字典中。也就是说，DELETE语句删除的是表中的数据，而不是关于表的定义。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span></div><div class="line"><span class="keyword">FROM</span> &lt;表名&gt;</div><div class="line">[<span class="keyword">WHERE</span> &lt;条件&gt;]</div></pre></td></tr></table></figure>
<h3 id="5-判断相关子查询？不相关子查询？"><a href="#5-判断相关子查询？不相关子查询？" class="headerlink" title="5.判断相关子查询？不相关子查询？"></a>5.判断相关子查询？不相关子查询？</h3><h4 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h4><p>子查询的查询条件依赖于父查询</p>
<p>示例：找出每个学生超过她自己选修课程平均成绩的课程号</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>    SNO,Cno</div><div class="line"><span class="keyword">from</span>      SC x</div><div class="line"><span class="keyword">where</span>     Grade &gt;=  </div><div class="line">  (<span class="keyword">select</span>    <span class="keyword">AVG</span>(SNO)</div><div class="line">  <span class="keyword">from</span>       SC y</div><div class="line">  <span class="keyword">where</span>      y.sno=s.sno)</div></pre></td></tr></table></figure>
<p>内层查询是求一个学生的平均成绩，至于哪个学生的平均成绩还要看x.Sno的值，而该值是与父查询相关的。</p>
<h4 id="不相关子查询"><a href="#不相关子查询" class="headerlink" title="不相关子查询"></a>不相关子查询</h4><p>子查询的查询条件不依赖于父查询</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>    SNO,SNAME</div><div class="line"><span class="keyword">from</span>      Student</div><div class="line"><span class="keyword">where</span> 	  SNO <span class="keyword">in</span></div><div class="line">  (<span class="keyword">select</span>    SNO</div><div class="line">  <span class="keyword">from</span>    	 SC</div><div class="line">  <span class="keyword">where</span>  	 CNO = <span class="string">'C1'</span>);</div></pre></td></tr></table></figure>
<h3 id="6-空值的性质、有关处理"><a href="#6-空值的性质、有关处理" class="headerlink" title="6.空值的性质、有关处理"></a>6.空值的性质、有关处理</h3><p>空值就是“不知道”或“不存在”或“无意义”的值，取空值一般有以下情况：</p>
<ul>
<li>该属性应该有一个值，但目前不知道它具体的值。如漏填的年龄</li>
<li>该属性不应该有值。如缺考考生的成绩</li>
<li>由于某种原因不便于填写，如不想让其他人知道的电话号码</li>
</ul>
<ol>
<li>空值产生</li>
</ol>
<p>插入数据时，没有赋值的属性产生空值，修改数据为空也产生空值</p>
<ol>
<li>空值判断</li>
</ol>
<p>判断一个属性是否为空，用<code>IS NULL</code> 或 <code>IS NOT NULL</code>来判断</p>
<ol>
<li>空值的约束条件</li>
</ol>
<p>属性定义中有<code>NOT NULL</code>约束条件不能取空值，加了<code>UNIQUE</code>限制的不能取空值，码属性不能取空值</p>
<ol>
<li>空值的算数运算、比较运算和逻辑运算</li>
</ol>
<p>空值与空值算数运算结果为空</p>
<p>空值与另一个值比较结果为<code>UNKNOWN</code></p>
<h3 id="7-视图的定义、查询等语句"><a href="#7-视图的定义、查询等语句" class="headerlink" title="7.视图的定义、查询等语句"></a>7.视图的定义、查询等语句</h3><p>是从基本表(或其他视图)中导出的虚表(结果集)</p>
<h4 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Create</span> <span class="keyword">View</span> CS_Stu</div><div class="line">      <span class="keyword">as</span></div><div class="line">      <span class="keyword">Select</span> sno,sname,ssex</div><div class="line">      <span class="keyword">From</span> Student</div><div class="line">      <span class="keyword">Where</span> sdept = ‘CS’</div><div class="line">      <span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span></div></pre></td></tr></table></figure>
<p>其中，子查询可以是任意<code>SELECT</code>语句</p>
<p>在定义视图时加上<code>WITH CHECK OPTION</code>子句，以后对该视图进行插入、修改和删除操作时，关系数据库系统会自动加上<code>sdept = ‘CS’</code>的条件。</p>
<p>视图不仅可以建立在一个或多个基本表上，也可以在一个或多个已定义好的视图上，或建立在基本表与视图上</p>
<h4 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> sno,sname</div><div class="line"><span class="keyword">From</span> CS_Stu</div><div class="line"><span class="keyword">Where</span> ssex = ‘M’</div></pre></td></tr></table></figure>
<p>视图定义好后，查询操作和基本表一样</p>
<h3 id="8-视图作用"><a href="#8-视图作用" class="headerlink" title="8.视图作用"></a>8.视图作用</h3><h4 id="1-视图能够简化用户操作"><a href="#1-视图能够简化用户操作" class="headerlink" title="(1)视图能够简化用户操作"></a>(1)视图能够简化用户操作</h4><p>用户可以将注意力集中在所关心的数据上，定义的视图可以使数据库看起来结构简单、清晰，并且可以简化用户的数据查询操作。</p>
<h4 id="2-视图能够使用户能以多种角度看待同一数据"><a href="#2-视图能够使用户能以多种角度看待同一数据" class="headerlink" title="(2)视图能够使用户能以多种角度看待同一数据"></a>(2)视图能够使用户能以多种角度看待同一数据</h4><p>视图机制能够使用户能以不同方式看待同一数据，当许多不同种类用户共享同一数据库时，这种灵活性十分重要。</p>
<h4 id="3-视图对重构数据库提供了一定程度的逻辑独立性"><a href="#3-视图对重构数据库提供了一定程度的逻辑独立性" class="headerlink" title="(3)视图对重构数据库提供了一定程度的逻辑独立性"></a>(3)视图对重构数据库提供了一定程度的逻辑独立性</h4><p>当数据库的逻辑结构改变时，应用程序不必修改，因为新建立的视图定义为用户原来的关系，使用户的外模式保持不变，用户的应用程序通过视图仍然能查找数据</p>
<h4 id="4-视图能对机密数据提供保护"><a href="#4-视图能对机密数据提供保护" class="headerlink" title="(4)视图能对机密数据提供保护"></a>(4)视图能对机密数据提供保护</h4><p>对不同的用户定义不同的视图，使机密数据不出现在不应该看到这些数据的用户视图上。</p>
<h4 id="5-适当的利用视图可以更清晰的表达查询"><a href="#5-适当的利用视图可以更清晰的表达查询" class="headerlink" title="(5)适当的利用视图可以更清晰的表达查询"></a>(5)适当的利用视图可以更清晰的表达查询</h4><h3 id="9-如何用视图实现安全保护，举例"><a href="#9-如何用视图实现安全保护，举例" class="headerlink" title="9.如何用视图实现安全保护，举例"></a>9.如何用视图实现安全保护，举例</h3><p>对不同的用户定义不同的视图，使机密数据不出现在不应该看到这些数据的用户视图上。例如Student表设计全校15个院系的学生数据，可以在其上定义15个视图，每一个视图只包含一个院系的学生数据，只允许每个院系的主人查询和修改本院系的学生视图。</p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="1-什么是数据库的安全性"><a href="#1-什么是数据库的安全性" class="headerlink" title="1.什么是数据库的安全性"></a>1.什么是数据库的安全性</h3><p>数据库安全性是指保护数据库以防止不合法使用所造成的<strong>数据泄漏</strong>、<strong>更改</strong>或<strong>破坏</strong></p>
<h3 id="2-有几种安全控制策略"><a href="#2-有几种安全控制策略" class="headerlink" title="2.有几种安全控制策略"></a>2.有几种安全控制策略</h3><ul>
<li>用户标识和鉴定</li>
<li>多层存取控制</li>
<li>视图</li>
<li>审计</li>
<li>数据加密</li>
</ul>
<h3 id="3-控制（授权等）语句的定义和作用"><a href="#3-控制（授权等）语句的定义和作用" class="headerlink" title="3.控制（授权等）语句的定义和作用"></a>3.控制（授权等）语句的定义和作用</h3><h4 id="1-授权"><a href="#1-授权" class="headerlink" title="(1)授权"></a>(1)授权</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grant</span> 表级权限 <span class="keyword">on</span> &#123;表名 | 视图名&#125;</div><div class="line"> <span class="keyword">to</span>  &#123;用户 [，用户]… | <span class="keyword">public</span>&#125;</div><div class="line">         <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span></div></pre></td></tr></table></figure>
<p>语义为对指定操作对象的指定操作权限授予指定用户</p>
<p>发出<code>GRANT</code>语句的可以是数据库管理员，也可以是数据库对象创建者</p>
<p>如果指定了<code>with grant option</code>子句，则获得某种权限的用户还可以把这种权限再授予其他用户，反之则不能传播该权限。</p>
<p>示例：把查询Student表的权限授予给用户U1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GRANT SELECT</div><div class="line">ON TABLE Student</div><div class="line">TO U1</div></pre></td></tr></table></figure>
<h4 id="2-回收"><a href="#2-回收" class="headerlink" title="(2)回收"></a>(2)回收</h4><p>授予用户的权限可以由管理员或其他授权者用<code>REVOKE</code>语句收回，一般格式为</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">revoke</span> 表级权限 <span class="keyword">on</span> &#123;表名 | 视图名&#125;</div><div class="line"> <span class="keyword">from</span>  &#123;用户 [，用户]… | <span class="keyword">public</span>&#125;</div></pre></td></tr></table></figure>
<p>示例：把用户U1查询Student表的权限收回</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></div><div class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</div><div class="line"><span class="keyword">FROM</span> U1 <span class="keyword">CASCADE</span></div></pre></td></tr></table></figure>
<p>将用户U1权限收回的同时，由于U1将权限赋给了U2，因此级联<code>CASCADE</code>收回了U2的权限。</p>
<h3 id="4-有哪两种存取控制方法，主体和客体指的是什么"><a href="#4-有哪两种存取控制方法，主体和客体指的是什么" class="headerlink" title="4.有哪两种存取控制方法，主体和客体指的是什么"></a>4.有哪两种存取控制方法，主体和客体指的是什么</h3><p>存取控制方法分为<strong>自主存取控制</strong>和<strong>强制存取控制</strong></p>
<p>在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类。</p>
<p><strong>主体</strong>是系统中的活动实体，既包括数据库管理系统所包括的实际用户，也包括代表用户的各种进程。<strong>客体</strong>是系统中的被动实体，是受主体操作的，包括文件、基本表、索引、视图等。</p>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="1-什么是数据库的完整性"><a href="#1-什么是数据库的完整性" class="headerlink" title="1.什么是数据库的完整性"></a>1.什么是数据库的完整性</h3><p>数据库的完整性是指数据的<strong>正确性</strong>和<strong>相容性</strong>。正确性是指数据是符合现实世界语义、反应当前实际状况的；数据的相容性是指数据库同一对象在不同关系表中的数据是符合逻辑的。</p>
<h3 id="2-为维护数据库的完整性，数据库管理系统必须能实现哪三种功能"><a href="#2-为维护数据库的完整性，数据库管理系统必须能实现哪三种功能" class="headerlink" title="2.为维护数据库的完整性，数据库管理系统必须能实现哪三种功能"></a>2.为维护数据库的完整性，数据库管理系统必须能实现哪三种功能</h3><ol>
<li>提供定义完整性约束条件的机制</li>
<li>提供完整性检查方法</li>
<li>提供违约处理</li>
</ol>
<h3 id="3-删除被参照关系的元组时可能采取哪三种作法？修改被参照关系中的主码时可能采取哪三种作法？"><a href="#3-删除被参照关系的元组时可能采取哪三种作法？修改被参照关系中的主码时可能采取哪三种作法？" class="headerlink" title="3.删除被参照关系的元组时可能采取哪三种作法？修改被参照关系中的主码时可能采取哪三种作法？"></a>3.删除被参照关系的元组时可能采取哪三种作法？修改被参照关系中的主码时可能采取哪三种作法？</h3><p>删除被参照关系的元组或修改了主码值，可以通过拒绝执行、级联删除和设置为空值3种方法</p>
<h3 id="4-掌握SQL-Server中的实体和参照完整性的语句格式，并会应用。SQL-Server中可以定义几种约束。"><a href="#4-掌握SQL-Server中的实体和参照完整性的语句格式，并会应用。SQL-Server中可以定义几种约束。" class="headerlink" title="4.掌握SQL Server中的实体和参照完整性的语句格式，并会应用。SQL Server中可以定义几种约束。"></a>4.掌握SQL Server中的实体和参照完整性的语句格式，并会应用。SQL Server中可以定义几种约束。</h3><p><strong>PRIMARY KEY</strong>约束</p>
<p><strong>DEFAULT</strong>约束</p>
<p><strong>CHECK</strong>约束</p>
<p><strong>UNIQUE</strong>约束</p>
<p><strong>FOREIGN KEY</strong>约束</p>
<h3 id="5-创建触发器的SQL语句"><a href="#5-创建触发器的SQL语句" class="headerlink" title="5.创建触发器的SQL语句"></a>5.创建触发器的SQL语句</h3><p>触发器（Trigger）是用户定义在关系表上的一类由<strong>事件驱动</strong>的特殊过程</p>
<p>触发器保存在数据库服务器中</p>
<p>任何用户对表的增、删、改操作均由服务器自动激活相应的触发器</p>
<p>触发器可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力</p>
<p>触发器又叫做事件-条件-动作（event-condition-action）规则。当特定的系统事件发生时，对规则的条件进行检查，如果条件成立则执行规则中的动作，否则不执行该动作。规则中的动作体可以很复杂，通常是一段SQL存储过程。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> [OWNER.]TRIGGER_NAME</div><div class="line"><span class="keyword">ON</span> &#123;[OWNER].TABLE_NAME|<span class="keyword">VIEW</span>&#125;</div><div class="line">   &#123; <span class="keyword">FOR</span> | <span class="keyword">AFTER</span> | INSTEAD <span class="keyword">OF</span> &#125; &#123;<span class="keyword">INSERT</span>|<span class="keyword">UPDATE</span>|<span class="keyword">DELETE</span>&#125;</div><div class="line">   <span class="keyword">AS</span></div><div class="line">   SQL_Statements</div></pre></td></tr></table></figure>
<p><code>TRIGGER_NAME</code>：触发器名称</p>
<p><code>ON TABLE_NAME</code>：触发动作相关联的表</p>
<p><code>AFTER或FOR</code>：触发器在操作(如INSERT)执行后被激发 </p>
<p><code>INSTEAD OF</code>：执行触发器而不是执行触发SQL语句(即INSERT等)，从而替代触发语句的操作 </p>
<p><code>INSERT|UPDATE|DELETE</code>：指定在发生哪一种数据动作时被触发</p>
<p><code>SQL_Statements</code>：触发器执行的SQL语句</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;h3 id=&quot;1-什么是数据库？数据库数据有哪三个基本特点？&quot;&gt;&lt;a href=&quot;#1-什么是数据库？数据库数据有哪三个基本特点？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是数据库？数据库数据有哪三个基本特点？&quot;&gt;&lt;/a&gt;1.什么是数据库？数据库数据有哪三个基本特点？&lt;/h3&gt;&lt;p&gt;数据库是长期储存在计算机内，有组织，可共享的大量数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有&lt;strong&gt;较小的冗余度&lt;/strong&gt;、&lt;strong&gt;较高的数据独立性&lt;/strong&gt;和&lt;strong&gt;易扩展性&lt;/strong&gt;，并可为各种用户共享&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>连接池介绍--C3P0连接池</title>
    <link href="http://yoursite.com/2017/05/29/JAVA%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D-C3P0%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://yoursite.com/2017/05/29/JAVA连接池介绍-C3P0连接池/</id>
    <published>2017-05-29T11:20:44.000Z</published>
    <updated>2017-05-29T13:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    初学JDBC技术来连接数据库时，每一次连接DBMS都需要很繁琐的执行以下步骤：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.加载驱动</span></div><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line"><span class="comment">//2.连接数据库URL</span></div><div class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/test?"</span>  +<span class="string">"user=root&amp;password=root"</span>;</div><div class="line"><span class="comment">//3.获取数据库连接</span></div><div class="line">conn = DriverManager.getConnection(url);</div></pre></td></tr></table></figure>
<p>​    不论是一次小小的查询还是添加一条记录，你都得老老实实的按这三步走（加载驱动，连接数据库URL,获取数据库连接）。然而当系统变得复杂了，数据库的操作更加频繁，系统的性能也会随之下降。<br><a id="more"></a></p>
<p>​    有句话说“<strong>数据库连接很昂贵</strong>”。每一次创建一个数据库连接，他的内部都会执行着：</p>
<blockquote>
<ol>
<li><p>“DriverManager”检查并注册驱动程序。</p>
</li>
<li><p>在驱动程序类中调用“connect(url…)”方法。</p>
</li>
<li><p>connect方法根据我们请求的“connUrl”，创建一个“Socket连接”，连接到IP为“your.database.domain”，默认端口3306的数据库。</p>
</li>
<li><p>创建的Socket连接将被用来查询我们指定的数据库，并最终让程序返回得到一个结果。 </p>
</li>
</ol>
<p>​  有时数据库连接所耗费的时间甚至大于执行查询操作所花费的时间，如果有一种方法，能够预先加载好一些连接对象，每当要执行数据库操作时，无需重新建立连接，只需使用预先加载好的一个连接对象，那么系统的性能将会大大的提高。</p>
</blockquote>
<p><strong>连接池就是为解决这类问题存在的。</strong> </p>
<h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数据库连接池负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</strong>；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>简单的说，连接池就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p>
<p>于是，通过连接池，我们只要在系统启动时预先加载好一些连接对象，当需要的时候再也不需要繁琐的步骤，现成的给你准备好啦，拿了就用，用完了放回去下次再接着用，系统加载的速度会变快，性能也会随之增加了。</p>
<h2 id="几种主流的java连接池"><a href="#几种主流的java连接池" class="headerlink" title="几种主流的java连接池"></a>几种主流的java连接池</h2><h3 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h3><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能。目前使用它的开源项目有hibernate，spring等。是一个成熟的、高并发的JDBC连接池库，用于缓存和重用PreparedStatements支持。c3p0具有自动回收空闲连接功能。</p>
<p><strong>主要特性：</strong>1、编码的简单易用。2、连接的复用。3、连接的管理</p>
<h3 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a><strong>DBCP</strong></h3><p>是Apache上的一个 <a href="http://lib.csdn.net/base/javase" target="_blank" rel="external">Java</a>连接池项目，也是 tomcat使用的连接池组件。单独使用dbcp需要3个包：<code>common-dbcp.jar</code>,<code>common-pool.jar</code>,<code>common-collections.jar</code>由于建立数据库连接是一个非常耗时耗资源的行为，所以通过连接池预先同数据库建立一些连接，放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完后再放回去。dbcp没有自动的去回收空闲连接的功能。 </p>
<h3 id="Proxool"><a href="#Proxool" class="headerlink" title="Proxool"></a><strong>Proxool</strong></h3><p>Proxool是一个Java SQL Driver驱动程序，提供了对你选择的其它类型的驱动程序的连接池封装。可以非常简单的移植到现存的代码中。完全可配置。快速，成熟，健壮。可以透明地为你现存的JDBC驱动程序增加连接池功能。</p>
<h1 id="C3P0连接池使用"><a href="#C3P0连接池使用" class="headerlink" title="C3P0连接池使用"></a>C3P0连接池使用</h1><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li><p>下载 <a href="http://download.csdn.net/download/eson_15/9525734" target="_blank" rel="external">C3P0连接池jar包</a>和<a href="https://dev.mysql.com/downloads/connector/" target="_blank" rel="external">mysql驱动</a>,导入工程文件。</p>
</li>
<li><p>创建配置文件c3p0-config.xml。（在src根目录下，名字不能改）</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/98108670.jpg" alt=""></p>
</li>
</ol>
<h3 id="书写连接池配置"><a href="#书写连接池配置" class="headerlink" title="书写连接池配置"></a>书写连接池配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- This is default config! --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/contacts?characterEncoding=utf8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="comment">&lt;!-- This is my config for mysql--&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"mysql"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置信息主要是填写数据库驱动、数据库名称、数据库用户名、密码等等，一般修改这些信息，其他的按默认的就可以了。</p>
<h3 id="启动C3P0连接池"><a href="#启动C3P0连接池" class="headerlink" title="启动C3P0连接池"></a>启动C3P0连接池</h3><p>完成了前面的准备工作和信息配置，下面就正式进入连接池的操作了。</p>
<p>建立一个C3P0Demo测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;  	  </div><div class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;  </div><div class="line">	</div><div class="line">	<span class="comment">/** </span></div><div class="line">	 * 数据库工具类 </div><div class="line">	 * <span class="doctag">@author</span> cloud </div><div class="line">	 * </div><div class="line">	 */  </div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Util</span> </span>&#123;  </div><div class="line">	    <span class="keyword">static</span> ComboPooledDataSource cpds=<span class="keyword">null</span>;  </div><div class="line">	    <span class="keyword">static</span>&#123;  </div><div class="line">	        cpds = <span class="keyword">new</span> ComboPooledDataSource();<span class="comment">//这是mysql数据库  </span></div><div class="line">	    &#125;  </div><div class="line">	    <span class="comment">/** </span></div><div class="line">	     * 获得数据库连接 </div><div class="line">	     * <span class="doctag">@return</span>   Connection </div><div class="line">	     */  </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;  </div><div class="line">	        <span class="keyword">try</span> &#123;  </div><div class="line">	            <span class="keyword">return</span> cpds.getConnection();  </div><div class="line">	        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">	            e.printStackTrace(); </div><div class="line">	            System.out.println(<span class="string">"连接失败"</span>);</div><div class="line">	            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">	        &#125;  </div><div class="line">	    &#125;  </div><div class="line">	      </div><div class="line">	    <span class="comment">/** </span></div><div class="line">	     * 放回连接对象，close方法并不是关闭，而是更改该连接对象的状态为可用。 </div><div class="line">	     * <span class="doctag">@param</span> conn   </div><div class="line">	     */  </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn)</span></span>&#123;  </div><div class="line">	        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;  </div><div class="line">	            <span class="keyword">try</span> &#123;  </div><div class="line">	                conn.close();  </div><div class="line">	            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">	                e.printStackTrace();  </div><div class="line">	            &#125;  </div><div class="line">	        &#125;  </div><div class="line">	    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在test数据库中创建一个student表</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/30426071.jpg" alt=""></p>
<p>在刚刚创建的测试类C3P0Demo种添加如下main方法，插入1条数据</p>
<p>NO:201701</p>
<p>NAME:TOM</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">   <span class="comment">/** </span></div><div class="line">    * 测试DBUtil类 </div><div class="line">    * <span class="doctag">@param</span> args </div><div class="line">    *</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">   	Connection conn = C3P0Util.getConnection();</div><div class="line">	System.out.println(<span class="string">"连接成功"</span>);</div><div class="line">	<span class="comment">//插入信息的sql语句</span></div><div class="line">	String sql = <span class="string">"insert into student(no,name)values(?,?)"</span>;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="comment">//获取PreparedStatement对象</span></div><div class="line">		PreparedStatement ps = conn.prepareStatement(sql);</div><div class="line">		<span class="comment">//对sql语句对占位符进行动态赋值</span></div><div class="line">		ps.setString(<span class="number">1</span>, <span class="string">"201701"</span>);</div><div class="line">		ps.setString(<span class="number">2</span>, <span class="string">"TOM"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//执行更新操作</span></div><div class="line">		ps.executeUpdate();</div><div class="line">		ps.close();</div><div class="line">	   &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">		   e.printStackTrace();</div><div class="line">	   &#125;<span class="keyword">finally</span>&#123;		</div><div class="line">	<span class="comment">//关闭数据库连接</span></div><div class="line">    C3P0Util.close(conn);</div><div class="line">&#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>运行程序，执行结果如下</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/58781294.jpg" alt=""></p>
<p>查看数据库，可以看到刚刚插入的数据已经成功插入，证明C3P0数据库配置成功。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-29/16598521.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;​    初学JDBC技术来连接数据库时，每一次连接DBMS都需要很繁琐的执行以下步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1.加载驱动&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2.连接数据库URL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String url = &lt;span class=&quot;string&quot;&gt;&quot;jdbc:mysql://localhost:3306/test?&quot;&lt;/span&gt;  +&lt;span class=&quot;string&quot;&gt;&quot;user=root&amp;amp;password=root&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3.获取数据库连接&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;conn = DriverManager.getConnection(url);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    不论是一次小小的查询还是添加一条记录，你都得老老实实的按这三步走（加载驱动，连接数据库URL,获取数据库连接）。然而当系统变得复杂了，数据库的操作更加频繁，系统的性能也会随之下降。&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="连接池" scheme="http://yoursite.com/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
      <category term="C3P0" scheme="http://yoursite.com/tags/C3P0/"/>
    
  </entry>
  
  <entry>
    <title>MacOS上基于Github的hexo博客</title>
    <link href="http://yoursite.com/2017/05/19/MacOS%E4%B8%8A%E5%9F%BA%E4%BA%8EGithub%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/05/19/MacOS上基于Github的hexo博客/</id>
    <published>2017-05-19T13:57:51.000Z</published>
    <updated>2017-05-23T02:56:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    本教程主要是为了记录此博客的搭建过程，让自己对学习搭建博客的历程有一个更清晰的认识，而不是稀里糊涂把各种官方文档啊博客啊七拼八凑的倒腾出一个博客，自己不明不白的都不知道为什么就搭起来了。</p>
<p>​    很早以前就有搭建博客的想法了，既然想好了以后是要走技术路线，起码要有一个像样的博客。并且我可以在博客里记录最近学的一块知识点，或者新技术等等，并且讲这些东西系统的、规范化的整理起来，巩固自己的同时，也能把这些东西让其他需要的人看到，这是一种很棒的感觉！</p>
<p>​    像这么一个博客，我从hexo是什么都不知道到搭建出这么一个像样的博客配置好主题推送到GitHubPage上花了将近快四个小时，中间遇到了无数的坑，磕磕绊绊的也完成了。所以只要有肯折腾，对自己有信心，没有什么做不出来。</p>
<p>​    那么下面就正式进入教程吧：<br><a id="more"></a></p>
<h1 id="1-准备工具–配置搭建环境"><a href="#1-准备工具–配置搭建环境" class="headerlink" title="1. 准备工具–配置搭建环境"></a>1. 准备工具–配置搭建环境</h1><ul>
<li>操作系统：MacOS </li>
</ul>
<ul>
<li><p>Github账号</p>
</li>
<li><p>包管理工具：Homebrew</p>
</li>
<li><p>版本控制：git</p>
</li>
<li><p>Node.js</p>
</li>
<li><p>hexo</p>
</li>
</ul>
<h2 id="1-1-GitHub账号"><a href="#1-1-GitHub账号" class="headerlink" title="1.1 GitHub账号"></a>1.1 GitHub账号</h2><ol>
<li>百度GitHub进入官网</li>
<li>Sign up for Github</li>
<li>填写账号信息，什么姓名啊邮箱啊</li>
<li>选择免费的用户计划</li>
<li>完成注册</li>
</ol>
<p>参考教程：<a href="http://jingyan.baidu.com/article/455a9950abe0ada167277864.html" target="_blank" rel="external">github注册教程地址</a></p>
<h2 id="1-2-Homebrew包管理工具"><a href="#1-2-Homebrew包管理工具" class="headerlink" title="1.2 Homebrew包管理工具"></a>1.2 Homebrew包管理工具</h2><ul>
<li><p>作用：在Mac中方便的安装软件或者卸载软件，例如git、node.js、等等。</p>
</li>
<li><p>安装 Homebrew </p>
<p>在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1-3-版本控制工具：git"><a href="#1-3-版本控制工具：git" class="headerlink" title="1.3 版本控制工具：git"></a>1.3 版本控制工具：git</h2><p>两种安装Git的方法:</p>
<ol>
<li><p>在安装homebrew的基础上，用命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install git</div></pre></td></tr></table></figure>
</li>
<li><p>从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p>
</li>
</ol>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/75785087-file_1495215463124_8bd1.jpg" alt=""></p>
<h2 id="1-4-安装Node-js"><a href="#1-4-安装Node-js" class="headerlink" title="1.4 安装Node.js"></a>1.4 安装Node.js</h2><p>Node.js可以生成静态页面，也有两种安装方式：</p>
<ol>
<li><p>在安装好包管理工具的基础上，用brew来安装，在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<p>某些地区某些时间可能会被墙，如果网络状况不好那可能是被墙污染了，采用第二种方式即可</p>
</li>
<li><p>在<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a>下载安装包安装</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/98603588-file_1495216272785_2dc5.png" alt="Markdown"></p>
</li>
</ol>
<h2 id="1-5-安装hexo"><a href="#1-5-安装hexo" class="headerlink" title="1.5 安装hexo"></a>1.5 安装hexo</h2><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>接着会提示输入管理员密码，输入完毕后等待安装完成</p>
<h1 id="2-初始化本地博客"><a href="#2-初始化本地博客" class="headerlink" title="2. 初始化本地博客"></a>2. 初始化本地博客</h1><p>​    以上工作完成以后，可以说是万事俱备了。该有的都有了，那么博客就可以正式的开始搭建了。</p>
<p>​    第一步：找一个存放你整个博客站点文件的目录。以我的为例，我在/Users/yunhuang 下创建了一个名为myblog的文件，用于存放我的博客站点。</p>
<p>​    第二步：创建成功后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /Users/yunhuang/myblog</div></pre></td></tr></table></figure>
<p>​    cd来到你创建的目录下，执行<code>hexo init</code>命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div></pre></td></tr></table></figure>
<p>等待安装完成后的提示：</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/93680168-file_1495217189423_51b6.png" alt="Markdown"></p>
<p>再一次cd到初始化创建产生的blog文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /Users/yunhuang/myblog/blog</div></pre></td></tr></table></figure>
<p>然后执行如下命令，安装npm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>进入blog文件内，看一看hexo初始化后的文件目录是不是包含以下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_config.yml    </div><div class="line">db.json </div><div class="line">node_modules </div><div class="line">package.json</div><div class="line">scaffolds</div><div class="line">source</div><div class="line">themes</div></pre></td></tr></table></figure>
<p>到此，博客初始化就算完成了，已经迫不及待的想打开看看自己搭建博客的样子，测试一下吧，在命令行打开服务测试一下效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>打开浏览器，输入站点的默认端口<a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://localhost:4000</a></p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/73145612-file_1495217577451_572.png" alt="Markdown"></p>
<p>到此，一个本地的博客初始化就算完成啦！</p>
<h1 id="3-推送到GitHub"><a href="#3-推送到GitHub" class="headerlink" title="3. 推送到GitHub"></a>3. 推送到GitHub</h1><p>​    本地的博客搭建好啦，但只能自己玩单机给自己嗨。这时候就需要用GitHub page提供的免费空间来存储我们的博客了。</p>
<h2 id="3-1-创建GitHub仓库"><a href="#3-1-创建GitHub仓库" class="headerlink" title="3.1 创建GitHub仓库"></a>3.1 创建GitHub仓库</h2><p>​    GitHub提供了免费的空间给我们存放站点，那自然是要在GitHub上创建一个仓库，仓库等名字不能乱取，为了让GitHub知道这不是一个普通的仓库，而是作为GitHub page的站点仓库，就必须采用固定的命名方式<code>用户名.github.io</code>。如<code>Cloud-Wong.github.io</code>。</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/72260524-file_1495251557262_4586.png" alt="Markdown"></p>
<p>建好以后主页大致就是这么一个样子。<strong>注意</strong>，左上角的<strong>命名规范</strong>！要严格按照<code>用户名.github.io</code>这么搞才行。</p>
<h2 id="3-2-推送站点到GitHub上"><a href="#3-2-推送站点到GitHub上" class="headerlink" title="3.2 推送站点到GitHub上"></a>3.2 推送站点到GitHub上</h2><p>仓库建好了，回到我们的命令行来。cd到我们初始化好的blog文件上。执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim _config.yml</div></pre></td></tr></table></figure>
<p>滑到最后可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: https://</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
<p>type如果不是git就改成git，repository这个参数代表了需要推送到的地址。回到刚刚新建好的GitHub仓库，复制</p>
<p><img src="http://oq6qnksdu.bkt.clouddn.com/17-5-20/32992010-file_1495252138238_476.png" alt="Markdown"></p>
<p>然后粘贴到repository后面</p>
<p>修改后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: https://github.com/Cloud-Wong/Cloud-Wong.github.io.git</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
<hr>
<p>当然你如果不想在控制台用vim编译器修改，直接打开blog文件夹，找到<code>_config.yml</code>配置文件，拉到最后修改保存也可以。</p>
<p>⚠️注意：配置信息内到所有参数的<strong>冒号后面都要有一个空格！！！</strong>否则hexo命令会报错。</p>
<p>在blog文件夹下执行命令生成静态文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">此时若出现如下报错：</div><div class="line">ERROR Local hexo not found in ~/blog</div><div class="line">ERROR Try runing: &apos;npm install hexo --save&apos;</div><div class="line">则执行命令：</div><div class="line">npm install hexo --save</div><div class="line">若无报错，自行忽略此步骤。</div></pre></td></tr></table></figure>
<p>静态页面生成以后，就可以把整个站点推送到GitHub上了，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>如果说无法连接到git，执行<code>npm install hexo-deployer-git --save</code>，然后再次执行<code>hexo generate</code>和<code>hexo deploy</code>命令。</p>
<p>成功连接后，就可以打开浏览器输入<code>cloud-wong.github.io</code>验证。你将会看到和之前在本地初始化一样的界面。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>参考博客：<a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="external">与佳期的个人博客</a></p>
<p>官方文档：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub page</a></li>
<li><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本教程主要是为了记录此博客的搭建过程，让自己对学习搭建博客的历程有一个更清晰的认识，而不是稀里糊涂把各种官方文档啊博客啊七拼八凑的倒腾出一个博客，自己不明不白的都不知道为什么就搭起来了。&lt;/p&gt;
&lt;p&gt;​    很早以前就有搭建博客的想法了，既然想好了以后是要走技术路线，起码要有一个像样的博客。并且我可以在博客里记录最近学的一块知识点，或者新技术等等，并且讲这些东西系统的、规范化的整理起来，巩固自己的同时，也能把这些东西让其他需要的人看到，这是一种很棒的感觉！&lt;/p&gt;
&lt;p&gt;​    像这么一个博客，我从hexo是什么都不知道到搭建出这么一个像样的博客配置好主题推送到GitHubPage上花了将近快四个小时，中间遇到了无数的坑，磕磕绊绊的也完成了。所以只要有肯折腾，对自己有信心，没有什么做不出来。&lt;/p&gt;
&lt;p&gt;​    那么下面就正式进入教程吧：&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>java静态使用</title>
    <link href="http://yoursite.com/2017/05/18/java%E9%9D%99%E6%80%81%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/18/java静态使用/</id>
    <published>2017-05-18T12:32:25.000Z</published>
    <updated>2017-05-23T02:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h2><h3 id="什么时候用？"><a href="#什么时候用？" class="headerlink" title="什么时候用？"></a>什么时候用？</h3><ol>
<li>静态变量：<br>当分析对象中所具备的成员变量的值都是相同的，这时这个成员就可以修饰成静态。<br>只要数据在对象中都是不同的，就是对象的特有数据，这是非静态的；如果在对象中的数据是相同的，对象不需要修饰，不需要存储在对象中，设为静态即可。</li>
<li><p>静态函数：<br>函数是否修饰为静态，就参考该方法是否访问到了对象中的特有数据，如果有就用静态。</p>
<h3 id="构造函数的执行顺序"><a href="#构造函数的执行顺序" class="headerlink" title="构造函数的执行顺序"></a>构造函数的执行顺序</h3><a id="more"></a>
</li>
<li><p>JAVA中执行顺序</p>
</li>
</ol>
<p><strong>父类静态块-》自身静态块-》父类块-》父类构造器-》自身块-》自身构造器</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> DOG父类 </div><div class="line"> */  </div><div class="line">public class Dog &#123;  </div><div class="line">    public Dog() &#123;  </div><div class="line">        System.out.println(&quot;Dog&quot;);  </div><div class="line">    &#125;  </div><div class="line">    static&#123;  </div><div class="line">        System.out.println(&quot;super static block&quot;);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    &#123;  </div><div class="line">        System.out.println(&quot;super block&quot;);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/** </div><div class="line"> * 子类藏獒 </div><div class="line"> */  </div><div class="line">public class Mastiff extends Dog &#123;  </div><div class="line">    public Mastiff() &#123;  </div><div class="line">        System.out.println(&quot;Mastiff&quot;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    &#123;  </div><div class="line">        System.out.println(&quot;block&quot;);  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">    static &#123;  </div><div class="line">        System.out.println(&quot;static block&quot;);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    public static void  main(String[] args)&#123;  </div><div class="line">        Mastiff mastiff=new Mastiff();        </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<ul>
<li>super static block</li>
<li>static block</li>
<li>super block</li>
<li>Dog</li>
<li>block</li>
<li>Mastiff</li>
</ul>
<p> 也就是说此时的运行顺序为：</p>
<ul>
<li>父类静态块</li>
<li>自身静态块</li>
<li>父类块</li>
<li>父类构造器</li>
<li>自身块</li>
<li>自身构造器 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态&quot;&gt;&lt;a href=&quot;#静态&quot; class=&quot;headerlink&quot; title=&quot;静态&quot;&gt;&lt;/a&gt;静态&lt;/h2&gt;&lt;h3 id=&quot;什么时候用？&quot;&gt;&lt;a href=&quot;#什么时候用？&quot; class=&quot;headerlink&quot; title=&quot;什么时候用？&quot;&gt;&lt;/a&gt;什么时候用？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;静态变量：&lt;br&gt;当分析对象中所具备的成员变量的值都是相同的，这时这个成员就可以修饰成静态。&lt;br&gt;只要数据在对象中都是不同的，就是对象的特有数据，这是非静态的；如果在对象中的数据是相同的，对象不需要修饰，不需要存储在对象中，设为静态即可。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态函数：&lt;br&gt;函数是否修饰为静态，就参考该方法是否访问到了对象中的特有数据，如果有就用静态。&lt;/p&gt;
&lt;h3 id=&quot;构造函数的执行顺序&quot;&gt;&lt;a href=&quot;#构造函数的执行顺序&quot; class=&quot;headerlink&quot; title=&quot;构造函数的执行顺序&quot;&gt;&lt;/a&gt;构造函数的执行顺序&lt;/h3&gt;
    
    </summary>
    
      <category term="javase" scheme="http://yoursite.com/categories/javase/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/18/hello-world/"/>
    <id>http://yoursite.com/2017/05/18/hello-world/</id>
    <published>2017-05-17T17:22:26.000Z</published>
    <updated>2017-05-17T20:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
